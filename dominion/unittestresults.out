Function isGameOver successfully detected valid Endgame Condition:
	Province Pile Empty
Function isGameOver successfully detected valid Endgame Condition:
	Province Pile Full
	Three Empty Supplies
Function isGameOver successfully detected valid Endgame Condition:
	Province Pile Full
	Four Empty Supplies
Function isGameOver successfully detected valid Endgame Condition:
	Province Pile Full
	Five Empty Supplies
Function isGameOver successfully detected valid Endgame Condition:
	Province Pile Empty
	Five Empty Supplies

Test Successful!

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:65
        -:    0:Programs:64
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    17122:    8:int compare(const void* a, const void* b) {
    17122:    9:	if (*(int*)a > *(int*)b)
     5609:   10:		return 1;
    11513:   11:	if (*(int*)a < *(int*)b)
     3494:   12:		return -1;
     8019:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      188:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      188:   44:	SelectStream(1);
      188:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      188:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      188:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2068:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    20680:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    18800:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      188:   73:	if (numPlayers == 2)
        -:   74:	{
      188:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      188:   87:	if (numPlayers == 2)
        -:   88:	{
      188:   89:		state->supplyCount[estate] = 8;
      188:   90:		state->supplyCount[duchy] = 8;
      188:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      188:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      188:  102:	state->supplyCount[silver] = 40;
      188:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     3948:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    31020:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    29140:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     1880:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      752:  115:					if (numPlayers == 2){ 
      376:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1504:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     1880:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    27260:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      564:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      376:  140:		state->deckCount[i] = 0;
     1504:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1128:  143:			state->deck[i][j] = estate;
     1128:  144:			state->deckCount[i]++;
        -:  145:		}
     3008:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2632:  148:			state->deck[i][j] = copper;
     2632:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      564:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      376:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      564:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      376:  166:		state->handCount[i] = 0;
      376:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5264:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5076:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      188:  182:	state->outpostPlayed = 0;
      188:  183:	state->phase = 0;
      188:  184:	state->numActions = 1;
      188:  185:	state->numBuys = 1;
      188:  186:	state->playedCardCount = 0;
      188:  187:	state->whoseTurn = 0;
      188:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1128:  192:	for (it = 0; it < 5; it++){
      940:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      188:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      188:  198:	return 0;
        -:  199:}
        -:  200:
      478:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      478:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      478:  209:	if (state->deckCount[player] < 1)
       85:  210:		return -1;
      393:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6060:  214:	while (state->deckCount[player] > 0) {
     5274:  215:		card = floor(Random() * state->deckCount[player]);
     5274:  216:		newDeck[newDeckPos] = state->deck[player][card];
     5274:  217:		newDeckPos++;
   207223:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   201949:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     5274:  221:		state->deckCount[player]--;
        -:  222:	}
     5667:  223:	for (i = 0; i < newDeckPos; i++) {
     5274:  224:		state->deck[player][i] = newDeck[i];
     5274:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      393:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       30:  320:int supplyCount(int card, struct gameState *state) {
       30:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      278:  346:int whoseTurn(struct gameState *state) {
      278:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     1926:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     1926:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       82:  533:		for (i = 0; i < state->discardCount[player];i++){
       14:  534:			state->deck[player][i] = state->discard[player][i];
       14:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       68:  538:		state->deckCount[player] = state->discardCount[player];
       68:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       68:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       68:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       68:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       68:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       68:  559:		if (deckCounter == 0)
       54:  560:			return -1;
        -:  561:
       14:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       14:  563:		state->deckCount[player]--;
       14:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     1858:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     1858:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     1858:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1858:  576:		state->deckCount[player]--;
     1858:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     1872:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       70:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       70:  651:	int drawntreasure = 0;
       70:  652:	int currentPlayer = whoseTurn(state);
      868:  653:	while(drawntreasure < 2){
      728:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       28:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      728:  657:		drawCard(currentPlayer, state);
      728:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      728:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      140:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      588:  664:			temphand[i]=cardDrawn;
      588:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      588:  666:			i++;
        -:  667:		}
        -:  668:	}
      728:  669:	while(i - 1 >= 0){
      588:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      588:  671:		i = i - 1;
        -:  672:	}
       70:  673:}
        -:  674:
       60:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       60:  678:	int i = 0;
       60:  679:	int currentPlayer = whoseTurn(state);
      300:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      240:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       60:  686:	discardCard(handPos, currentPlayer, state, 0);
       60:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      148:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      148:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      148:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       70:  838:			adventurerCard(state);
       70:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       60:  934:			smithyCard(state, handPos);
       60:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
        9:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
        9:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
        9:  945:			discardCard(handPos, currentPlayer, state, 0);
        9:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
        9: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
        9: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
        9: 1007:			discardCard(handPos, currentPlayer, state, 0);
        9: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       78: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       78: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       78: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       78: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       78: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       78: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       78: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       78: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       78: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       78: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       78: 1295:	return 0;
        -: 1296:}
        -: 1297:
       30: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       30: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        3: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       27: 1313:	if (toFlag == 1)
        -: 1314:	{
        9: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        9: 1316:		state->deckCount[player]++;
        -: 1317:	}
       18: 1318:	else if (toFlag == 2)
        -: 1319:	{
        9: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
        9: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        9: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       27: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       27: 1332:	return 0;
        -: 1333:}
        -: 1334:
      206: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      206: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1326: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1120: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      770: 1347:			state->coins += 1;
        -: 1348:		}
      350: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       18: 1351:			state->coins += 2;
        -: 1352:		}
      332: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       18: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      206: 1360:	state->coins += bonus;
        -: 1361:
      206: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:

Function shuffle successfully detected invalid deck size
Deck Populated:
15	15	6	10	3	6	16	9	3	15	11	1	2	3	12	12	7	9	1	11	
6	9	1	6	10	5	16	10	13	10	15	2	0	13	12	3	2	3	12	6	
1	14	15	11	9	11	14	16	3	15	10	0	15	2	14	9	16	13	2	3	
15	9	5	15	5	1	1	15	12	4	12	4	10	11	16	2	13	4	9	7	
3	10	7	9	13	4	9	3	9	3	6	15	12	11	13	8	3	5	14	15	
0	10	11	1	12	1	11	16	5	3	6	16	14	13	9	1	8	1	4	8	
4	10	6	7	4	2	6	16	15	4	5	7	5	16	8	0	0	3	7	6	
14	13	5	2	0	5	3	8	15	7	8	2	8	14	1	4	0	7	3	6	
2	16	13	7	16	5	15	7	16	5	4	4	1	1	7	9	6	1	9	4	
0	0	15	8	14	16	3	5	14	6	12	0	6	8	7	13	4	6	3	11	
2	8	7	4	0	14	4	6	15	13	2	6	13	0	15	11	7	1	16	4	
16	2	12	13	2	3	0	14	0	3	9	2	2	7	14	2	4	2	0	10	
6	2	0	3	10	6	5	0	15	12	12	5	15	8	1	8	2	1	5	2	
13	5	12	6	12	1	0	7	3	0	9	9	10	0	3	3	6	16	11	12	
12	6	1	1	5	10	9	7	3	5	0	16	11	4	13	14	5	13	5	8	
4	14	8	5	5	3	16	2	2	10	14	14	8	6	6	4	0	15	12	11	
12	3	10	6	7	14	11	12	11	16	11	6	4	11	12	9	14	11	2	16	
13	0	5	12	14	2	16	5	9	11	16	4	6	0	10	13	15	4	9	9	
12	11	15	7	5	1	8	2	4	10	10	0	1	6	12	16	8	11	4	0	
14	4	4	3	4	5	7	2	1	7	2	4	2	9	11	15	1	2	9	5	
4	10	5	5	16	8	12	15	3	0	16	8	12	11	2	7	8	9	1	9	
8	11	13	1	11	15	16	13	9	8	1	13	1	7	1	8	6	14	7	9	
5	14	8	8	16	10	15	7	11	7	7	10	2	11	11	4	1	1	0	10	
10	2	6	2	0	15	11	6	12	9	7	8	14	15	16	13	0	6	12	2	
4	10	12	14	5	14	2	14	15	2	7	16	4	13	2	12	2	4	2	15	
Function shuffle successfully shuffled the deck:
1	0	7	16	8	8	11	16	14	0	3	10	7	15	6	13	2	4	6	10	
7	4	8	15	5	14	10	14	9	5	16	5	11	2	4	2	14	16	15	4	
0	15	8	14	12	3	13	8	12	4	2	6	0	1	6	11	11	12	14	6	
8	13	9	10	3	10	0	11	15	0	15	0	10	11	16	7	5	15	1	8	
1	4	14	14	10	9	16	1	8	7	3	8	2	7	0	9	2	0	0	11	
5	10	14	7	5	15	7	1	9	0	6	8	6	8	5	10	6	8	10	5	
1	6	15	1	4	9	6	15	2	2	6	0	7	9	10	6	3	9	13	7	
6	3	0	15	5	13	13	1	9	13	3	11	1	13	12	6	3	16	1	10	
4	14	2	1	0	10	3	7	11	8	13	14	10	10	2	2	4	14	8	5	
16	0	4	9	14	16	8	7	0	9	2	11	12	16	13	12	6	2	4	9	
8	8	2	4	6	7	2	8	0	7	9	4	2	5	7	14	4	15	1	6	
12	12	9	16	12	12	2	5	13	5	11	13	9	2	15	11	15	10	0	11	
14	3	0	5	7	5	14	14	0	3	6	5	2	6	1	11	14	2	16	12	
1	4	1	2	2	9	14	4	10	3	4	3	4	15	7	8	16	0	8	5	
16	13	2	0	3	4	2	8	2	5	15	0	8	3	4	11	7	2	12	1	
5	4	8	12	4	3	1	12	5	2	11	9	0	4	2	3	11	16	10	9	
15	3	5	14	10	4	15	7	15	7	2	9	15	9	16	13	2	12	14	13	
13	6	6	2	10	0	3	9	2	16	13	5	4	6	12	1	15	15	2	15	
1	3	9	6	2	0	3	10	11	8	0	7	13	4	16	0	4	13	1	8	
2	0	16	13	3	4	15	12	12	6	2	11	13	12	3	9	10	9	4	12	
3	1	5	7	10	12	11	16	6	3	5	11	16	4	7	14	12	1	9	7	
11	12	10	3	6	15	2	12	5	4	11	5	16	16	5	16	5	1	14	1	
7	4	1	1	11	12	16	16	6	6	6	6	2	15	1	13	6	11	7	9	
13	2	14	5	11	14	1	4	12	7	1	5	3	9	16	11	11	2	3	16	
14	7	4	12	15	8	9	15	0	11	1	5	15	7	15	12	16	15	12	6	


All Tests Successful!

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:66
        -:    0:Programs:65
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    20975:    8:int compare(const void* a, const void* b) {
    20975:    9:	if (*(int*)a > *(int*)b)
     7456:   10:		return 1;
    13519:   11:	if (*(int*)a < *(int*)b)
     4180:   12:		return -1;
     9339:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      189:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      189:   44:	SelectStream(1);
      189:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      189:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      189:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2079:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    20790:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    18900:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      189:   73:	if (numPlayers == 2)
        -:   74:	{
      189:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      189:   87:	if (numPlayers == 2)
        -:   88:	{
      189:   89:		state->supplyCount[estate] = 8;
      189:   90:		state->supplyCount[duchy] = 8;
      189:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      189:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      189:  102:	state->supplyCount[silver] = 40;
      189:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     3969:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    31185:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    29295:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     1890:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      756:  115:					if (numPlayers == 2){ 
      378:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1512:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     1890:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    27405:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      567:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      378:  140:		state->deckCount[i] = 0;
     1512:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1134:  143:			state->deck[i][j] = estate;
     1134:  144:			state->deckCount[i]++;
        -:  145:		}
     3024:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2646:  148:			state->deck[i][j] = copper;
     2646:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      567:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      378:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      567:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      378:  166:		state->handCount[i] = 0;
      378:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5292:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5103:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      189:  182:	state->outpostPlayed = 0;
      189:  183:	state->phase = 0;
      189:  184:	state->numActions = 1;
      189:  185:	state->numBuys = 1;
      189:  186:	state->playedCardCount = 0;
      189:  187:	state->whoseTurn = 0;
      189:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1134:  192:	for (it = 0; it < 5; it++){
      945:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      189:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      189:  198:	return 0;
        -:  199:}
        -:  200:
      482:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      482:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      482:  209:	if (state->deckCount[player] < 1)
       86:  210:		return -1;
      396:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6586:  214:	while (state->deckCount[player] > 0) {
     5794:  215:		card = floor(Random() * state->deckCount[player]);
     5794:  216:		newDeck[newDeckPos] = state->deck[player][card];
     5794:  217:		newDeckPos++;
   271976:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   266182:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     5794:  221:		state->deckCount[player]--;
        -:  222:	}
     6190:  223:	for (i = 0; i < newDeckPos; i++) {
     5794:  224:		state->deck[player][i] = newDeck[i];
     5794:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      396:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       30:  320:int supplyCount(int card, struct gameState *state) {
       30:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      278:  346:int whoseTurn(struct gameState *state) {
      278:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     1931:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     1931:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       82:  533:		for (i = 0; i < state->discardCount[player];i++){
       14:  534:			state->deck[player][i] = state->discard[player][i];
       14:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       68:  538:		state->deckCount[player] = state->discardCount[player];
       68:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       68:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       68:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       68:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       68:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       68:  559:		if (deckCounter == 0)
       54:  560:			return -1;
        -:  561:
       14:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       14:  563:		state->deckCount[player]--;
       14:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     1863:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     1863:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     1863:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1863:  576:		state->deckCount[player]--;
     1863:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     1877:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       70:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       70:  651:	int drawntreasure = 0;
       70:  652:	int currentPlayer = whoseTurn(state);
      868:  653:	while(drawntreasure < 2){
      728:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       28:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      728:  657:		drawCard(currentPlayer, state);
      728:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      728:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      140:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      588:  664:			temphand[i]=cardDrawn;
      588:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      588:  666:			i++;
        -:  667:		}
        -:  668:	}
      728:  669:	while(i - 1 >= 0){
      588:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      588:  671:		i = i - 1;
        -:  672:	}
       70:  673:}
        -:  674:
       60:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       60:  678:	int i = 0;
       60:  679:	int currentPlayer = whoseTurn(state);
      300:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      240:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       60:  686:	discardCard(handPos, currentPlayer, state, 0);
       60:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      148:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      148:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      148:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       70:  838:			adventurerCard(state);
       70:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       60:  934:			smithyCard(state, handPos);
       60:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
        9:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
        9:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
        9:  945:			discardCard(handPos, currentPlayer, state, 0);
        9:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
        9: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
        9: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
        9: 1007:			discardCard(handPos, currentPlayer, state, 0);
        9: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       78: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       78: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       78: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       78: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       78: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       78: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       78: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       78: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       78: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       78: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       78: 1295:	return 0;
        -: 1296:}
        -: 1297:
       30: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       30: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        3: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       27: 1313:	if (toFlag == 1)
        -: 1314:	{
        9: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        9: 1316:		state->deckCount[player]++;
        -: 1317:	}
       18: 1318:	else if (toFlag == 2)
        -: 1319:	{
        9: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
        9: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        9: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       27: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       27: 1332:	return 0;
        -: 1333:}
        -: 1334:
      207: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      207: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1332: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1125: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      774: 1347:			state->coins += 1;
        -: 1348:		}
      351: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       18: 1351:			state->coins += 2;
        -: 1352:		}
      333: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       18: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      207: 1360:	state->coins += bonus;
        -: 1361:
      207: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
Function updateCoins successfully updated coin values
Function updateCoins successfully detected copper cards
Function updateCoins successfully detected silver cards
Function updateCoins successfully detected gold cards
Function updateCoins successfully detected all treasure cards
Function updateCoins successfully detected bonus treasure

All Tests Successful!

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:67
        -:    0:Programs:66
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    21005:    8:int compare(const void* a, const void* b) {
    21005:    9:	if (*(int*)a > *(int*)b)
     7456:   10:		return 1;
    13549:   11:	if (*(int*)a < *(int*)b)
     4188:   12:		return -1;
     9361:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      190:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      190:   44:	SelectStream(1);
      190:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      190:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      190:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2090:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    20900:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    19000:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      190:   73:	if (numPlayers == 2)
        -:   74:	{
      190:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      190:   87:	if (numPlayers == 2)
        -:   88:	{
      190:   89:		state->supplyCount[estate] = 8;
      190:   90:		state->supplyCount[duchy] = 8;
      190:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      190:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      190:  102:	state->supplyCount[silver] = 40;
      190:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     3990:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    31350:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    29450:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     1900:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      760:  115:					if (numPlayers == 2){ 
      380:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1520:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     1900:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    27550:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      570:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      380:  140:		state->deckCount[i] = 0;
     1520:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1140:  143:			state->deck[i][j] = estate;
     1140:  144:			state->deckCount[i]++;
        -:  145:		}
     3040:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2660:  148:			state->deck[i][j] = copper;
     2660:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      570:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      380:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      570:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      380:  166:		state->handCount[i] = 0;
      380:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5320:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5130:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      190:  182:	state->outpostPlayed = 0;
      190:  183:	state->phase = 0;
      190:  184:	state->numActions = 1;
      190:  185:	state->numBuys = 1;
      190:  186:	state->playedCardCount = 0;
      190:  187:	state->whoseTurn = 0;
      190:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1140:  192:	for (it = 0; it < 5; it++){
      950:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      190:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      190:  198:	return 0;
        -:  199:}
        -:  200:
      484:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      484:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      484:  209:	if (state->deckCount[player] < 1)
       86:  210:		return -1;
      398:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6610:  214:	while (state->deckCount[player] > 0) {
     5814:  215:		card = floor(Random() * state->deckCount[player]);
     5814:  216:		newDeck[newDeckPos] = state->deck[player][card];
     5814:  217:		newDeckPos++;
   272046:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   266232:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     5814:  221:		state->deckCount[player]--;
        -:  222:	}
     6212:  223:	for (i = 0; i < newDeckPos; i++) {
     5814:  224:		state->deck[player][i] = newDeck[i];
     5814:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      398:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       30:  320:int supplyCount(int card, struct gameState *state) {
       30:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      278:  346:int whoseTurn(struct gameState *state) {
      278:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     1936:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     1936:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       82:  533:		for (i = 0; i < state->discardCount[player];i++){
       14:  534:			state->deck[player][i] = state->discard[player][i];
       14:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       68:  538:		state->deckCount[player] = state->discardCount[player];
       68:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       68:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       68:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       68:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       68:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       68:  559:		if (deckCounter == 0)
       54:  560:			return -1;
        -:  561:
       14:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       14:  563:		state->deckCount[player]--;
       14:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     1868:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     1868:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     1868:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1868:  576:		state->deckCount[player]--;
     1868:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     1882:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       70:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       70:  651:	int drawntreasure = 0;
       70:  652:	int currentPlayer = whoseTurn(state);
      868:  653:	while(drawntreasure < 2){
      728:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       28:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      728:  657:		drawCard(currentPlayer, state);
      728:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      728:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      140:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      588:  664:			temphand[i]=cardDrawn;
      588:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      588:  666:			i++;
        -:  667:		}
        -:  668:	}
      728:  669:	while(i - 1 >= 0){
      588:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      588:  671:		i = i - 1;
        -:  672:	}
       70:  673:}
        -:  674:
       60:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       60:  678:	int i = 0;
       60:  679:	int currentPlayer = whoseTurn(state);
      300:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      240:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       60:  686:	discardCard(handPos, currentPlayer, state, 0);
       60:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      148:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      148:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      148:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       70:  838:			adventurerCard(state);
       70:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       60:  934:			smithyCard(state, handPos);
       60:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
        9:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
        9:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
        9:  945:			discardCard(handPos, currentPlayer, state, 0);
        9:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
        9: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
        9: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
        9: 1007:			discardCard(handPos, currentPlayer, state, 0);
        9: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       78: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       78: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       78: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       78: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       78: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       78: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       78: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       78: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       78: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       78: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       78: 1295:	return 0;
        -: 1296:}
        -: 1297:
       30: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       30: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        3: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       27: 1313:	if (toFlag == 1)
        -: 1314:	{
        9: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        9: 1316:		state->deckCount[player]++;
        -: 1317:	}
       18: 1318:	else if (toFlag == 2)
        -: 1319:	{
        9: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        9: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
        9: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        9: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       27: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       27: 1332:	return 0;
        -: 1333:}
        -: 1334:
      214: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      214: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1404: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1190: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      784: 1347:			state->coins += 1;
        -: 1348:		}
      406: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       24: 1351:			state->coins += 2;
        -: 1352:		}
      382: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       24: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      214: 1360:	state->coins += bonus;
        -: 1361:
      214: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
Function gainCard correctly adds to empty discard
Function gainCard correctly adds to empty discard counter
Function gainCard correctly adds to partially-full discard
Function gainCard correctly adds to partially-full discard counter
Function gainCard incorrectly adds to full discard
Function gainCard incorrectly adds to full discard counter
Function gainCard correctly adds to empty discard
Function gainCard correctly adds to empty discard counter
Function gainCard correctly adds to partially-full deck
Function gainCard correctly adds to partially-full deck counter
Function gainCard incorrectly adds to full deck
Function gainCard incorrectly adds to full deck counter
Function gainCard correctly adds to empty hand
Function gainCard correctly adds to empty hand counter
Function gainCard correctly adds to partially-full hand
Function gainCard correctly adds to partially-full hand counter
Function gainCard incorrectly adds to full hand
Function gainCard incorrectly adds to full hand counter
Function gainCard correctly does not draw from empty supply

Test Failed with Code 0x000C6180

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:68
        -:    0:Programs:67
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    21305:    8:int compare(const void* a, const void* b) {
    21305:    9:	if (*(int*)a > *(int*)b)
     7456:   10:		return 1;
    13849:   11:	if (*(int*)a < *(int*)b)
     4268:   12:		return -1;
     9581:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      200:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      200:   44:	SelectStream(1);
      200:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      200:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      200:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2200:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    22000:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    20000:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      200:   73:	if (numPlayers == 2)
        -:   74:	{
      200:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      200:   87:	if (numPlayers == 2)
        -:   88:	{
      200:   89:		state->supplyCount[estate] = 8;
      200:   90:		state->supplyCount[duchy] = 8;
      200:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      200:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      200:  102:	state->supplyCount[silver] = 40;
      200:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     4200:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    33000:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    31000:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     2000:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      800:  115:					if (numPlayers == 2){ 
      400:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1600:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     2000:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    29000:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      600:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      400:  140:		state->deckCount[i] = 0;
     1600:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1200:  143:			state->deck[i][j] = estate;
     1200:  144:			state->deckCount[i]++;
        -:  145:		}
     3200:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2800:  148:			state->deck[i][j] = copper;
     2800:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      600:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      400:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      600:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      400:  166:		state->handCount[i] = 0;
      400:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5600:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5400:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      200:  182:	state->outpostPlayed = 0;
      200:  183:	state->phase = 0;
      200:  184:	state->numActions = 1;
      200:  185:	state->numBuys = 1;
      200:  186:	state->playedCardCount = 0;
      200:  187:	state->whoseTurn = 0;
      200:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1200:  192:	for (it = 0; it < 5; it++){
     1000:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      200:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      200:  198:	return 0;
        -:  199:}
        -:  200:
      504:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      504:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      504:  209:	if (state->deckCount[player] < 1)
       86:  210:		return -1;
      418:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6850:  214:	while (state->deckCount[player] > 0) {
     6014:  215:		card = floor(Random() * state->deckCount[player]);
     6014:  216:		newDeck[newDeckPos] = state->deck[player][card];
     6014:  217:		newDeckPos++;
   272746:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   266732:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     6014:  221:		state->deckCount[player]--;
        -:  222:	}
     6432:  223:	for (i = 0; i < newDeckPos; i++) {
     6014:  224:		state->deck[player][i] = newDeck[i];
     6014:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      418:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       40:  320:int supplyCount(int card, struct gameState *state) {
       40:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      278:  346:int whoseTurn(struct gameState *state) {
      278:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     1986:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     1986:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       82:  533:		for (i = 0; i < state->discardCount[player];i++){
       14:  534:			state->deck[player][i] = state->discard[player][i];
       14:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       68:  538:		state->deckCount[player] = state->discardCount[player];
       68:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       68:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       68:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       68:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       68:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       68:  559:		if (deckCounter == 0)
       54:  560:			return -1;
        -:  561:
       14:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       14:  563:		state->deckCount[player]--;
       14:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     1918:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     1918:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     1918:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1918:  576:		state->deckCount[player]--;
     1918:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     1932:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       70:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       70:  651:	int drawntreasure = 0;
       70:  652:	int currentPlayer = whoseTurn(state);
      868:  653:	while(drawntreasure < 2){
      728:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       28:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      728:  657:		drawCard(currentPlayer, state);
      728:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      728:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      140:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      588:  664:			temphand[i]=cardDrawn;
      588:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      588:  666:			i++;
        -:  667:		}
        -:  668:	}
      728:  669:	while(i - 1 >= 0){
      588:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      588:  671:		i = i - 1;
        -:  672:	}
       70:  673:}
        -:  674:
       60:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       60:  678:	int i = 0;
       60:  679:	int currentPlayer = whoseTurn(state);
      300:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      240:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       60:  686:	discardCard(handPos, currentPlayer, state, 0);
       60:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      148:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      148:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      148:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       70:  838:			adventurerCard(state);
       70:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       60:  934:			smithyCard(state, handPos);
       60:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
        9:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
        9:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
        9:  945:			discardCard(handPos, currentPlayer, state, 0);
        9:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
        9: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
        9: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
        9: 1007:			discardCard(handPos, currentPlayer, state, 0);
        9: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       78: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       78: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       78: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       78: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       78: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       78: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       78: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       78: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       78: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       78: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       78: 1295:	return 0;
        -: 1296:}
        -: 1297:
       40: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       40: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        4: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       36: 1313:	if (toFlag == 1)
        -: 1314:	{
       12: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       12: 1316:		state->deckCount[player]++;
        -: 1317:	}
       24: 1318:	else if (toFlag == 2)
        -: 1319:	{
       12: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
       12: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
       12: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       36: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       36: 1332:	return 0;
        -: 1333:}
        -: 1334:
      224: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      224: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1464: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1240: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      824: 1347:			state->coins += 1;
        -: 1348:		}
      416: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       24: 1351:			state->coins += 2;
        -: 1352:		}
      392: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       24: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      224: 1360:	state->coins += bonus;
        -: 1361:
      224: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
Adventurer correctly counts copper from deck
Adventurer correctly adds copper to hand
Adventurer correctly counts silver from deck
Adventurer correctly adds silver to hand
Adventurer correctly counts gold from deck
Adventurer correctly adds gold to hand
Adventurer correctly counts from discard and deck
Adventurer correctly adds to hand from discard and deck
Adventurer correctly counts single treasure when two not available
Adventurer correctly adds single treasure to hand when two not available

Test Successful!

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:69
        -:    0:Programs:68
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    21455:    8:int compare(const void* a, const void* b) {
    21455:    9:	if (*(int*)a > *(int*)b)
     7456:   10:		return 1;
    13999:   11:	if (*(int*)a < *(int*)b)
     4308:   12:		return -1;
     9691:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      205:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      205:   44:	SelectStream(1);
      205:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      205:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      205:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2255:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    22550:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    20500:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      205:   73:	if (numPlayers == 2)
        -:   74:	{
      205:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      205:   87:	if (numPlayers == 2)
        -:   88:	{
      205:   89:		state->supplyCount[estate] = 8;
      205:   90:		state->supplyCount[duchy] = 8;
      205:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      205:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      205:  102:	state->supplyCount[silver] = 40;
      205:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     4305:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    33825:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    31775:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     2050:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      820:  115:					if (numPlayers == 2){ 
      410:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1640:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     2050:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    29725:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      615:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      410:  140:		state->deckCount[i] = 0;
     1640:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1230:  143:			state->deck[i][j] = estate;
     1230:  144:			state->deckCount[i]++;
        -:  145:		}
     3280:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2870:  148:			state->deck[i][j] = copper;
     2870:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      615:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      410:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      615:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      410:  166:		state->handCount[i] = 0;
      410:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5740:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5535:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      205:  182:	state->outpostPlayed = 0;
      205:  183:	state->phase = 0;
      205:  184:	state->numActions = 1;
      205:  185:	state->numBuys = 1;
      205:  186:	state->playedCardCount = 0;
      205:  187:	state->whoseTurn = 0;
      205:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1230:  192:	for (it = 0; it < 5; it++){
     1025:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      205:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      205:  198:	return 0;
        -:  199:}
        -:  200:
      518:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      518:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      518:  209:	if (state->deckCount[player] < 1)
       89:  210:		return -1;
      429:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6973:  214:	while (state->deckCount[player] > 0) {
     6115:  215:		card = floor(Random() * state->deckCount[player]);
     6115:  216:		newDeck[newDeckPos] = state->deck[player][card];
     6115:  217:		newDeckPos++;
   273097:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   266982:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     6115:  221:		state->deckCount[player]--;
        -:  222:	}
     6544:  223:	for (i = 0; i < newDeckPos; i++) {
     6115:  224:		state->deck[player][i] = newDeck[i];
     6115:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      429:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       40:  320:int supplyCount(int card, struct gameState *state) {
       40:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      288:  346:int whoseTurn(struct gameState *state) {
      288:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     2063:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     2063:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       85:  533:		for (i = 0; i < state->discardCount[player];i++){
       15:  534:			state->deck[player][i] = state->discard[player][i];
       15:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       70:  538:		state->deckCount[player] = state->discardCount[player];
       70:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       70:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       70:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       70:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       70:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       70:  559:		if (deckCounter == 0)
       55:  560:			return -1;
        -:  561:
       15:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:		state->deckCount[player]--;
       15:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     1993:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     1993:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     1993:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1993:  576:		state->deckCount[player]--;
     1993:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     2008:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       75:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       75:  651:	int drawntreasure = 0;
       75:  652:	int currentPlayer = whoseTurn(state);
      930:  653:	while(drawntreasure < 2){
      780:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       30:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      780:  657:		drawCard(currentPlayer, state);
      780:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      780:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      150:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      630:  664:			temphand[i]=cardDrawn;
      630:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      630:  666:			i++;
        -:  667:		}
        -:  668:	}
      780:  669:	while(i - 1 >= 0){
      630:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      630:  671:		i = i - 1;
        -:  672:	}
       75:  673:}
        -:  674:
       60:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       60:  678:	int i = 0;
       60:  679:	int currentPlayer = whoseTurn(state);
      300:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      240:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       60:  686:	discardCard(handPos, currentPlayer, state, 0);
       60:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      153:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      153:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      153:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       75:  838:			adventurerCard(state);
       75:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       60:  934:			smithyCard(state, handPos);
       60:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
        9:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
        9:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
        9:  945:			discardCard(handPos, currentPlayer, state, 0);
        9:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
        9: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
        9: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
        9: 1007:			discardCard(handPos, currentPlayer, state, 0);
        9: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       78: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       78: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       78: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       78: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       78: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       78: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       78: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       78: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       78: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       78: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       78: 1295:	return 0;
        -: 1296:}
        -: 1297:
       40: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       40: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        4: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       36: 1313:	if (toFlag == 1)
        -: 1314:	{
       12: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       12: 1316:		state->deckCount[player]++;
        -: 1317:	}
       24: 1318:	else if (toFlag == 2)
        -: 1319:	{
       12: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
       12: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
       12: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       36: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       36: 1332:	return 0;
        -: 1333:}
        -: 1334:
      229: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      229: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1494: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1265: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      844: 1347:			state->coins += 1;
        -: 1348:		}
      421: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       24: 1351:			state->coins += 2;
        -: 1352:		}
      397: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       24: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      229: 1360:	state->coins += bonus;
        -: 1361:
      229: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
Smithy drew an incorrect number (4) of cards when called from the top of the deck
Smithy drew an incorrect number (4) of cards when called from the bottom of the deck
Smithy drew fewer cards when not enough were available

Test Failed with Code 0x00000003

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:70
        -:    0:Programs:69
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    21545:    8:int compare(const void* a, const void* b) {
    21545:    9:	if (*(int*)a > *(int*)b)
     7456:   10:		return 1;
    14089:   11:	if (*(int*)a < *(int*)b)
     4332:   12:		return -1;
     9757:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      208:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      208:   44:	SelectStream(1);
      208:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      208:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      208:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2288:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    22880:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    20800:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      208:   73:	if (numPlayers == 2)
        -:   74:	{
      208:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      208:   87:	if (numPlayers == 2)
        -:   88:	{
      208:   89:		state->supplyCount[estate] = 8;
      208:   90:		state->supplyCount[duchy] = 8;
      208:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      208:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      208:  102:	state->supplyCount[silver] = 40;
      208:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     4368:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    34320:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    32240:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     2080:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      832:  115:					if (numPlayers == 2){ 
      416:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1664:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     2080:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    30160:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      624:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      416:  140:		state->deckCount[i] = 0;
     1664:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1248:  143:			state->deck[i][j] = estate;
     1248:  144:			state->deckCount[i]++;
        -:  145:		}
     3328:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2912:  148:			state->deck[i][j] = copper;
     2912:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      624:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      416:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      624:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      416:  166:		state->handCount[i] = 0;
      416:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5824:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5616:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      208:  182:	state->outpostPlayed = 0;
      208:  183:	state->phase = 0;
      208:  184:	state->numActions = 1;
      208:  185:	state->numBuys = 1;
      208:  186:	state->playedCardCount = 0;
      208:  187:	state->whoseTurn = 0;
      208:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1248:  192:	for (it = 0; it < 5; it++){
     1040:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      208:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      208:  198:	return 0;
        -:  199:}
        -:  200:
      526:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      526:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      526:  209:	if (state->deckCount[player] < 1)
       91:  210:		return -1;
      435:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     7045:  214:	while (state->deckCount[player] > 0) {
     6175:  215:		card = floor(Random() * state->deckCount[player]);
     6175:  216:		newDeck[newDeckPos] = state->deck[player][card];
     6175:  217:		newDeckPos++;
   273307:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   267132:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     6175:  221:		state->deckCount[player]--;
        -:  222:	}
     6610:  223:	for (i = 0; i < newDeckPos; i++) {
     6175:  224:		state->deck[player][i] = newDeck[i];
     6175:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      435:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       40:  320:int supplyCount(int card, struct gameState *state) {
       40:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      294:  346:int whoseTurn(struct gameState *state) {
      294:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     2090:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     2090:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       87:  533:		for (i = 0; i < state->discardCount[player];i++){
       15:  534:			state->deck[player][i] = state->discard[player][i];
       15:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       72:  538:		state->deckCount[player] = state->discardCount[player];
       72:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       72:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       72:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       72:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       72:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       72:  559:		if (deckCounter == 0)
       57:  560:			return -1;
        -:  561:
       15:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:		state->deckCount[player]--;
       15:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     2018:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     2018:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     2018:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2018:  576:		state->deckCount[player]--;
     2018:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     2033:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       75:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       75:  651:	int drawntreasure = 0;
       75:  652:	int currentPlayer = whoseTurn(state);
      930:  653:	while(drawntreasure < 2){
      780:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       30:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      780:  657:		drawCard(currentPlayer, state);
      780:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      780:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      150:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      630:  664:			temphand[i]=cardDrawn;
      630:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      630:  666:			i++;
        -:  667:		}
        -:  668:	}
      780:  669:	while(i - 1 >= 0){
      630:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      630:  671:		i = i - 1;
        -:  672:	}
       75:  673:}
        -:  674:
       63:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       63:  678:	int i = 0;
       63:  679:	int currentPlayer = whoseTurn(state);
      315:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      252:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       63:  686:	discardCard(handPos, currentPlayer, state, 0);
       63:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      156:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      156:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      156:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       75:  838:			adventurerCard(state);
       75:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       63:  934:			smithyCard(state, handPos);
       63:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
        9:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
        9:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
        9:  945:			discardCard(handPos, currentPlayer, state, 0);
        9:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
        9: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
        9: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
        9: 1007:			discardCard(handPos, currentPlayer, state, 0);
        9: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       81: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       81: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       81: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       81: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       81: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       81: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       81: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       81: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       81: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       81: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       81: 1295:	return 0;
        -: 1296:}
        -: 1297:
       40: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       40: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        4: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       36: 1313:	if (toFlag == 1)
        -: 1314:	{
       12: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       12: 1316:		state->deckCount[player]++;
        -: 1317:	}
       24: 1318:	else if (toFlag == 2)
        -: 1319:	{
       12: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
       12: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
       12: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       36: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       36: 1332:	return 0;
        -: 1333:}
        -: 1334:
      232: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      232: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1512: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1280: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      856: 1347:			state->coins += 1;
        -: 1348:		}
      424: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       24: 1351:			state->coins += 2;
        -: 1352:		}
      400: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       24: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      232: 1360:	state->coins += bonus;
        -: 1361:
      232: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
Village successfully drew a card
Village successfully added actions

Test Successful!

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:71
        -:    0:Programs:70
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    21575:    8:int compare(const void* a, const void* b) {
    21575:    9:	if (*(int*)a > *(int*)b)
     7456:   10:		return 1;
    14119:   11:	if (*(int*)a < *(int*)b)
     4340:   12:		return -1;
     9779:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      209:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      209:   44:	SelectStream(1);
      209:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      209:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      209:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2299:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    22990:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    20900:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      209:   73:	if (numPlayers == 2)
        -:   74:	{
      209:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      209:   87:	if (numPlayers == 2)
        -:   88:	{
      209:   89:		state->supplyCount[estate] = 8;
      209:   90:		state->supplyCount[duchy] = 8;
      209:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      209:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      209:  102:	state->supplyCount[silver] = 40;
      209:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     4389:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    34485:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    32395:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     2090:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      836:  115:					if (numPlayers == 2){ 
      418:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1672:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     2090:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    30305:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      627:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      418:  140:		state->deckCount[i] = 0;
     1672:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1254:  143:			state->deck[i][j] = estate;
     1254:  144:			state->deckCount[i]++;
        -:  145:		}
     3344:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2926:  148:			state->deck[i][j] = copper;
     2926:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      627:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      418:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      627:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      418:  166:		state->handCount[i] = 0;
      418:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5852:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5643:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      209:  182:	state->outpostPlayed = 0;
      209:  183:	state->phase = 0;
      209:  184:	state->numActions = 1;
      209:  185:	state->numBuys = 1;
      209:  186:	state->playedCardCount = 0;
      209:  187:	state->whoseTurn = 0;
      209:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1254:  192:	for (it = 0; it < 5; it++){
     1045:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      209:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      209:  198:	return 0;
        -:  199:}
        -:  200:
      528:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      528:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      528:  209:	if (state->deckCount[player] < 1)
       91:  210:		return -1;
      437:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     7069:  214:	while (state->deckCount[player] > 0) {
     6195:  215:		card = floor(Random() * state->deckCount[player]);
     6195:  216:		newDeck[newDeckPos] = state->deck[player][card];
     6195:  217:		newDeckPos++;
   273377:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   267182:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     6195:  221:		state->deckCount[player]--;
        -:  222:	}
     6632:  223:	for (i = 0; i < newDeckPos; i++) {
     6195:  224:		state->deck[player][i] = newDeck[i];
     6195:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      437:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       40:  320:int supplyCount(int card, struct gameState *state) {
       40:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      295:  346:int whoseTurn(struct gameState *state) {
      295:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     2096:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     2096:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       87:  533:		for (i = 0; i < state->discardCount[player];i++){
       15:  534:			state->deck[player][i] = state->discard[player][i];
       15:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       72:  538:		state->deckCount[player] = state->discardCount[player];
       72:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       72:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       72:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       72:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       72:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       72:  559:		if (deckCounter == 0)
       57:  560:			return -1;
        -:  561:
       15:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:		state->deckCount[player]--;
       15:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     2024:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     2024:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     2024:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2024:  576:		state->deckCount[player]--;
     2024:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     2039:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       75:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       75:  651:	int drawntreasure = 0;
       75:  652:	int currentPlayer = whoseTurn(state);
      930:  653:	while(drawntreasure < 2){
      780:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       30:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      780:  657:		drawCard(currentPlayer, state);
      780:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      780:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      150:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      630:  664:			temphand[i]=cardDrawn;
      630:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      630:  666:			i++;
        -:  667:		}
        -:  668:	}
      780:  669:	while(i - 1 >= 0){
      630:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      630:  671:		i = i - 1;
        -:  672:	}
       75:  673:}
        -:  674:
       63:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       63:  678:	int i = 0;
       63:  679:	int currentPlayer = whoseTurn(state);
      315:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      252:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       63:  686:	discardCard(handPos, currentPlayer, state, 0);
       63:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      157:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      157:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      157:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       75:  838:			adventurerCard(state);
       75:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       63:  934:			smithyCard(state, handPos);
       63:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
       10:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
       10:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
       10:  945:			discardCard(handPos, currentPlayer, state, 0);
       10:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
        9: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
        9: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
        9: 1007:			discardCard(handPos, currentPlayer, state, 0);
        9: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       82: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       82: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       82: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       82: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       82: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       82: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       82: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       82: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       82: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       82: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       82: 1295:	return 0;
        -: 1296:}
        -: 1297:
       40: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       40: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        4: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       36: 1313:	if (toFlag == 1)
        -: 1314:	{
       12: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       12: 1316:		state->deckCount[player]++;
        -: 1317:	}
       24: 1318:	else if (toFlag == 2)
        -: 1319:	{
       12: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
       12: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
       12: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       36: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       36: 1332:	return 0;
        -: 1333:}
        -: 1334:
      233: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      233: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1518: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1285: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      860: 1347:			state->coins += 1;
        -: 1348:		}
      425: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       24: 1351:			state->coins += 2;
        -: 1352:		}
      401: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       24: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      233: 1360:	state->coins += bonus;
        -: 1361:
      233: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
Great Hall successfully drew a card
Great Hall successfully added an action

Test Successful!

Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:84.62% of 13

Function 'cardEffect'
Lines executed:8.88% of 169

Function 'tributeCard'
Lines executed:0.00% of 39

Function 'sea_hagCard'
Lines executed:0.00% of 9

Function 'feastCard'
Lines executed:0.00% of 19

Function 'smithyCard'
Lines executed:100.00% of 7

Function 'adventurerCard'
Lines executed:100.00% of 17

Function 'getCost'
Lines executed:0.00% of 30

Function 'drawCard'
Lines executed:100.00% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:100.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:100.00% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:32.17% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:72
        -:    0:Programs:71
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    21605:    8:int compare(const void* a, const void* b) {
    21605:    9:	if (*(int*)a > *(int*)b)
     7456:   10:		return 1;
    14149:   11:	if (*(int*)a < *(int*)b)
     4348:   12:		return -1;
     9801:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
      210:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
      210:   44:	SelectStream(1);
      210:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
      210:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
      210:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
     2310:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    23100:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    21000:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
      210:   73:	if (numPlayers == 2)
        -:   74:	{
      210:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
      210:   87:	if (numPlayers == 2)
        -:   88:	{
      210:   89:		state->supplyCount[estate] = 8;
      210:   90:		state->supplyCount[duchy] = 8;
      210:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
      210:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
      210:  102:	state->supplyCount[silver] = 40;
      210:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
     4410:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    34650:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    32550:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
     2100:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
      840:  115:					if (numPlayers == 2){ 
      420:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
     1680:  122:					state->supplyCount[i] = 10;
        -:  123:				}
     2100:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    30450:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
      630:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
      420:  140:		state->deckCount[i] = 0;
     1680:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
     1260:  143:			state->deck[i][j] = estate;
     1260:  144:			state->deckCount[i]++;
        -:  145:		}
     3360:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
     2940:  148:			state->deck[i][j] = copper;
     2940:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
      630:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
      420:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
      630:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
      420:  166:		state->handCount[i] = 0;
      420:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
     5880:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
     5670:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
      210:  182:	state->outpostPlayed = 0;
      210:  183:	state->phase = 0;
      210:  184:	state->numActions = 1;
      210:  185:	state->numBuys = 1;
      210:  186:	state->playedCardCount = 0;
      210:  187:	state->whoseTurn = 0;
      210:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
     1260:  192:	for (it = 0; it < 5; it++){
     1050:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
      210:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
      210:  198:	return 0;
        -:  199:}
        -:  200:
      530:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      530:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      530:  209:	if (state->deckCount[player] < 1)
       91:  210:		return -1;
      439:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     7093:  214:	while (state->deckCount[player] > 0) {
     6215:  215:		card = floor(Random() * state->deckCount[player]);
     6215:  216:		newDeck[newDeckPos] = state->deck[player][card];
     6215:  217:		newDeckPos++;
   273447:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
   267232:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     6215:  221:		state->deckCount[player]--;
        -:  222:	}
     6654:  223:	for (i = 0; i < newDeckPos; i++) {
     6215:  224:		state->deck[player][i] = newDeck[i];
     6215:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      439:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       40:  320:int supplyCount(int card, struct gameState *state) {
       40:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
      296:  346:int whoseTurn(struct gameState *state) {
      296:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
       32:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       32:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
        8:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       24:  401:	j = 0;
      624:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
      600:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
       60:  406:			j++;
        -:  407:		}
        -:  408:	}
       24:  409:	if ( j >= 3)
        -:  410:	{
       12:  411:		return 1;
        -:  412:	}
        -:  413:
       12:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
     2102:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     2102:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       87:  533:		for (i = 0; i < state->discardCount[player];i++){
       15:  534:			state->deck[player][i] = state->discard[player][i];
       15:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       72:  538:		state->deckCount[player] = state->discardCount[player];
       72:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       72:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       72:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       72:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       72:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       72:  559:		if (deckCounter == 0)
       57:  560:			return -1;
        -:  561:
       15:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:		state->deckCount[player]--;
       15:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     2030:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     2030:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     2030:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2030:  576:		state->deckCount[player]--;
     2030:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     2045:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
       75:  646:void adventurerCard(struct gameState *state)
        -:  647:{
        -:  648:	int i;
        -:  649:	int cardDrawn;
        -:  650:	int temphand[MAX_HAND];
       75:  651:	int drawntreasure = 0;
       75:  652:	int currentPlayer = whoseTurn(state);
      930:  653:	while(drawntreasure < 2){
      780:  654:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
       30:  655:			shuffle(currentPlayer, state);
        -:  656:		}
      780:  657:		drawCard(currentPlayer, state);
      780:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      780:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:		{
      150:  661:			drawntreasure++;
        -:  662:		}
        -:  663:		else{
      630:  664:			temphand[i]=cardDrawn;
      630:  665:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      630:  666:			i++;
        -:  667:		}
        -:  668:	}
      780:  669:	while(i - 1 >= 0){
      630:  670:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[i - 1]; // discard all cards in play that have been drawn
      630:  671:		i = i - 1;
        -:  672:	}
       75:  673:}
        -:  674:
       63:  675:void smithyCard(struct gameState *state, int handPos)
        -:  676:{
        -:  677:	//+3 Cards
       63:  678:	int i = 0;
       63:  679:	int currentPlayer = whoseTurn(state);
      315:  680:	for (i = 0; i < 4; i++)
        -:  681:	{
      252:  682:		drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:
        -:  685:	//discard card from hand
       63:  686:	discardCard(handPos, currentPlayer, state, 0);
       63:  687:}
        -:  688:
    #####:  689:void feastCard(struct gameState *state, int choice)
        -:  690:{
        -:  691:	//gain card with cost up to 5
    #####:  692:	int i = 0;
    #####:  693:	int j = 0;
        -:  694:	int temphand[MAX_HAND];
    #####:  695:	int currentPlayer = whoseTurn(state);
        -:  696:	//Backup hand
    #####:  697:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:	}
        -:  701:	//Backup hand
        -:  702:
        -:  703:	//Update Coins for Buy
    #####:  704:	updateCoins(currentPlayer, state, 5);
    #####:  705:	j = 1;//Condition to loop on
    #####:  706:	while( j == 1) {//Buy one card
    #####:  707:		if (supplyCount(choice, state) <= 0){
        -:  708:			if (DEBUG)
        -:  709:				printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:			if (DEBUG){
        -:  712:				printf("Cards Left: %d\n", supplyCount(choice, state));
        -:  713:			}
        -:  714:		}
    #####:  715:		else if (state->coins < getCost(choice)){
    #####:  716:			printf("That card is too expensive!\n");
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Coins: %d < %d\n", state->coins, getCost(choice));
        -:  720:			}
        -:  721:		}
        -:  722:		else{
        -:  723:
        -:  724:			if (DEBUG){
        -:  725:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:			}
        -:  727:
    #####:  728:			gainCard(choice, state, 0, currentPlayer);//Gain the card
    #####:  729:			j = 0;//No more buying cards
        -:  730:
        -:  731:			if (DEBUG){
        -:  732:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:			}
        -:  734:
        -:  735:		}
        -:  736:	}     
        -:  737:
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:		temphand[i] = -1;
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
        -:  742:	}
        -:  743:	//Reset Hand
    #####:  744:}
        -:  745:
    #####:  746:void sea_hagCard(struct gameState *state)
        -:  747:{
    #####:  748:	int i = 0;
    #####:  749:	int currentPlayer = whoseTurn(state);
    #####:  750:	for (i = 0; i < state->numPlayers; i++){
    #####:  751:		if (i != currentPlayer){
    #####:  752:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####:  753:			state->discardCount[i]++;
    #####:  754:			state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        -:  755:		}
        -:  756:	}
    #####:  757:}
        -:  758:
    #####:  759:void tributeCard(struct gameState *state)
        -:  760:{
    #####:  761:	int i = 0;
    #####:  762:	int currentPlayer = whoseTurn(state);
    #####:  763:	int nextPlayer = currentPlayer + 1;
        -:  764:
    #####:  765:	int tributeRevealedCards[2] = {-1, -1};
    #####:  766:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  767:		nextPlayer = 0;
        -:  768:	}
    #####:  769:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  770:		if (state->deckCount[nextPlayer] > 0){
    #####:  771:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  772:			state->deckCount[nextPlayer]--;
        -:  773:		}
    #####:  774:		else if (state->discardCount[nextPlayer] > 0){
    #####:  775:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  776:			state->discardCount[nextPlayer]--;
        -:  777:		}
        -:  778:		else{
        -:  779:			//No Card to Reveal
        -:  780:			if (DEBUG){
        -:  781:				printf("No cards to reveal\n");
        -:  782:			}
        -:  783:		}
        -:  784:	}
        -:  785:
        -:  786:	else{
    #####:  787:		if (state->deckCount[nextPlayer] == 0){
    #####:  788:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  789:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  790:				state->deckCount[nextPlayer]++;
    #####:  791:				state->discard[nextPlayer][i] = -1;
    #####:  792:				state->discardCount[nextPlayer]--;
        -:  793:			}
        -:  794:
    #####:  795:			shuffle(nextPlayer,state);//Shuffle the deck
        -:  796:		} 
    #####:  797:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  798:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  799:		state->deckCount[nextPlayer]--;
    #####:  800:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  801:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  802:		state->deckCount[nextPlayer]--;
        -:  803:	}    
        -:  804:
    #####:  805:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  806:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  807:		state->playedCardCount++;
    #####:  808:		tributeRevealedCards[1] = -1;
        -:  809:	}
        -:  810:
    #####:  811:	for (i = 0; i <= 2; i ++){
    #####:  812:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  813:			state->coins += 2;
        -:  814:		}
        -:  815:
    #####:  816:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  817:			drawCard(currentPlayer, state);
    #####:  818:			drawCard(currentPlayer, state);
        -:  819:		}
        -:  820:		else{//Action Card
    #####:  821:			state->numActions = state->numActions + 2;
        -:  822:		}
        -:  823:	}
    #####:  824:}
        -:  825:
      158:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:	int i;
        -:  829:	int j;
        -:  830:	int k;
        -:  831:	int index;
      158:  832:	int currentPlayer = whoseTurn(state);
        -:  833:
        -:  834:	//uses switch to select card and perform actions
      158:  835:	switch( card ) 
        -:  836:	{
        -:  837:		case adventurer:
       75:  838:			adventurerCard(state);
       75:  839:			return 0;
        -:  840:
        -:  841:		case council_room:
        -:  842:			//+4 Cards
    #####:  843:			for (i = 0; i < 4; i++)
        -:  844:			{
    #####:  845:				drawCard(currentPlayer, state);
        -:  846:			}
        -:  847:
        -:  848:			//+1 Buy
    #####:  849:			state->numBuys++;
        -:  850:
        -:  851:			//Each other player draws a card
    #####:  852:			for (i = 0; i < state->numPlayers; i++)
        -:  853:			{
    #####:  854:				if ( i != currentPlayer )
        -:  855:				{
    #####:  856:					drawCard(i, state);
        -:  857:				}
        -:  858:			}
        -:  859:
        -:  860:			//put played card in played card pile
    #####:  861:			discardCard(handPos, currentPlayer, state, 0);
        -:  862:
    #####:  863:			return 0;
        -:  864:
        -:  865:		case feast:
    #####:  866:			feastCard(state, choice1);
    #####:  867:			return 0;
        -:  868:
        -:  869:		case gardens:
    #####:  870:			return -1;
        -:  871:
        -:  872:		case mine:
    #####:  873:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
    #####:  875:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  876:			{
    #####:  877:				return -1;
        -:  878:			}
        -:  879:
    #####:  880:			if (choice2 > treasure_map || choice2 < curse)
        -:  881:			{
    #####:  882:				return -1;
        -:  883:			}
        -:  884:
    #####:  885:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  886:			{
    #####:  887:				return -1;
        -:  888:			}
        -:  889:
    #####:  890:			gainCard(choice2, state, 2, currentPlayer);
        -:  891:
        -:  892:			//discard card from hand
    #####:  893:			discardCard(handPos, currentPlayer, state, 0);
        -:  894:
        -:  895:			//discard trashed card
    #####:  896:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  897:			{
    #####:  898:				if (state->hand[currentPlayer][i] == j)
        -:  899:				{
    #####:  900:					discardCard(i, currentPlayer, state, 0);			
    #####:  901:					break;
        -:  902:				}
        -:  903:			}
        -:  904:
    #####:  905:			return 0;
        -:  906:
        -:  907:		case remodel:
    #####:  908:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  911:			{
    #####:  912:				return -1;
        -:  913:			}
        -:  914:
    #####:  915:			gainCard(choice2, state, 0, currentPlayer);
        -:  916:
        -:  917:			//discard card from hand
    #####:  918:			discardCard(handPos, currentPlayer, state, 0);
        -:  919:
        -:  920:			//discard trashed card
    #####:  921:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  922:			{
    #####:  923:				if (state->hand[currentPlayer][i] == j)
        -:  924:				{
    #####:  925:					discardCard(i, currentPlayer, state, 0);			
    #####:  926:					break;
        -:  927:				}
        -:  928:			}
        -:  929:
        -:  930:
    #####:  931:			return 0;
        -:  932:
        -:  933:		case smithy:
       63:  934:			smithyCard(state, handPos);
       63:  935:			return 0;
        -:  936:
        -:  937:		case village:
        -:  938:			//+1 Card
       10:  939:			drawCard(currentPlayer, state);
        -:  940:
        -:  941:			//+2 Actions
       10:  942:			state->numActions = state->numActions + 2;
        -:  943:
        -:  944:			//discard played card from hand
       10:  945:			discardCard(handPos, currentPlayer, state, 0);
       10:  946:			return 0;
        -:  947:
        -:  948:		case baron:
    #####:  949:			state->numBuys++;//Increase buys by 1!
    #####:  950:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  951:				int p = 0;//Iterator for hand!
    #####:  952:				int card_not_discarded = 1;//Flag for discard set!
    #####:  953:				while(card_not_discarded){
    #####:  954:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  955:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  956:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  957:						state->discardCount[currentPlayer]++;
    #####:  958:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  959:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  960:						}
    #####:  961:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  962:						state->handCount[currentPlayer]--;
    #####:  963:						card_not_discarded = 0;//Exit the loop
        -:  964:					}
    #####:  965:					else if (p > state->handCount[currentPlayer]){
        -:  966:						if(DEBUG) {
        -:  967:							printf("No estate cards in your hand, invalid choice\n");
        -:  968:							printf("Must gain an estate if there are any\n");
        -:  969:						}
    #####:  970:						if (supplyCount(estate, state) > 0){
    #####:  971:							gainCard(estate, state, 0, currentPlayer);
    #####:  972:							state->supplyCount[estate]--;//Decrement estates
    #####:  973:							if (supplyCount(estate, state) == 0){
    #####:  974:								isGameOver(state);
        -:  975:							}
        -:  976:						}
    #####:  977:						card_not_discarded = 0;//Exit the loop
        -:  978:					}
        -:  979:
        -:  980:					else{
    #####:  981:						p++;//Next card
        -:  982:					}
        -:  983:				}
        -:  984:			}
        -:  985:
        -:  986:			else{
    #####:  987:				if (supplyCount(estate, state) > 0){
    #####:  988:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  989:					state->supplyCount[estate]--;//Decrement Estates
    #####:  990:					if (supplyCount(estate, state) == 0){
    #####:  991:						isGameOver(state);
        -:  992:					}
        -:  993:				}
        -:  994:			}
        -:  995:
        -:  996:
    #####:  997:			return 0;
        -:  998:
        -:  999:		case great_hall:
        -: 1000:			//+1 Card
       10: 1001:			drawCard(currentPlayer, state);
        -: 1002:
        -: 1003:			//+1 Actions
       10: 1004:			state->numActions++;
        -: 1005:
        -: 1006:			//discard card from hand
       10: 1007:			discardCard(handPos, currentPlayer, state, 0);
       10: 1008:			return 0;
        -: 1009:
        -: 1010:		case minion:
        -: 1011:			//+1 action
    #####: 1012:			state->numActions++;
        -: 1013:
        -: 1014:			//discard card from hand
    #####: 1015:			discardCard(handPos, currentPlayer, state, 0);
        -: 1016:
    #####: 1017:			if (choice1)		//+2 coins
        -: 1018:			{
    #####: 1019:				state->coins = state->coins + 2;
        -: 1020:			}
        -: 1021:
    #####: 1022:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1023:			{
        -: 1024:				//discard hand
    #####: 1025:				while(numHandCards(state) > 0)
        -: 1026:				{
    #####: 1027:					discardCard(handPos, currentPlayer, state, 0);
        -: 1028:				}
        -: 1029:
        -: 1030:				//draw 4
    #####: 1031:				for (i = 0; i < 4; i++)
        -: 1032:				{
    #####: 1033:					drawCard(currentPlayer, state);
        -: 1034:				}
        -: 1035:
        -: 1036:				//other players discard hand and redraw if hand size > 4
    #####: 1037:				for (i = 0; i < state->numPlayers; i++)
        -: 1038:				{
    #####: 1039:					if (i != currentPlayer)
        -: 1040:					{
    #####: 1041:						if ( state->handCount[i] > 4 )
        -: 1042:						{
        -: 1043:							//discard hand
    #####: 1044:							while( state->handCount[i] > 0 )
        -: 1045:							{
    #####: 1046:								discardCard(handPos, i, state, 0);
        -: 1047:							}
        -: 1048:
        -: 1049:							//draw 4
    #####: 1050:							for (j = 0; j < 4; j++)
        -: 1051:							{
    #####: 1052:								drawCard(i, state);
        -: 1053:							}
        -: 1054:						}
        -: 1055:					}
        -: 1056:				}
        -: 1057:
        -: 1058:			}
    #####: 1059:			return 0;
        -: 1060:
        -: 1061:		case steward:
    #####: 1062:			if (choice1 == 1)
        -: 1063:			{
        -: 1064:				//+2 cards
    #####: 1065:				drawCard(currentPlayer, state);
    #####: 1066:				drawCard(currentPlayer, state);
        -: 1067:			}
    #####: 1068:			else if (choice1 == 2)
        -: 1069:			{
        -: 1070:				//+2 coins
    #####: 1071:				state->coins = state->coins + 2;
        -: 1072:			}
        -: 1073:			else
        -: 1074:			{
        -: 1075:				//trash 2 cards in hand
    #####: 1076:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1077:				discardCard(choice3, currentPlayer, state, 1);
        -: 1078:			}
        -: 1079:
        -: 1080:			//discard card from hand
    #####: 1081:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:			return 0;
        -: 1083:
        -: 1084:		case tribute:
    #####: 1085:			tributeCard(state);
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			sea_hagCard(state);
    #####: 1224:			return 0;
        -: 1225:
        -: 1226:		case treasure_map:
        -: 1227:			//search hand for another treasure_map
    #####: 1228:			index = -1;
    #####: 1229:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:			{
    #####: 1231:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:				{
    #####: 1233:					index = i;
    #####: 1234:					break;
        -: 1235:				}
        -: 1236:			}
    #####: 1237:			if (index > -1)
        -: 1238:			{
        -: 1239:				//trash both treasure cards
    #####: 1240:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:				discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:				//gain 4 Gold cards
    #####: 1244:				for (i = 0; i < 4; i++)
        -: 1245:				{
    #####: 1246:					gainCard(gold, state, 1, currentPlayer);
        -: 1247:				}
        -: 1248:
        -: 1249:				//return success
    #####: 1250:				return 1;
        -: 1251:			}
        -: 1252:
        -: 1253:			//no second treasure_map found in hand
    #####: 1254:			return -1;
        -: 1255:	}
        -: 1256:
    #####: 1257:	return -1;
        -: 1258:}
        -: 1259:
       83: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:
        -: 1263:	//if card is not trashed, added to Played pile 
       83: 1264:	if (trashFlag < 1)
        -: 1265:	{
        -: 1266:		//add card to played pile
       83: 1267:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       83: 1268:		state->playedCardCount++;
        -: 1269:	}
        -: 1270:
        -: 1271:	//set played card to -1
       83: 1272:	state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:	//remove card from player's hand
       83: 1275:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
       83: 1280:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        -: 1285:	else 	
        -: 1286:	{
        -: 1287:		//replace discarded card with last card in hand
       83: 1288:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:		//set last card to -1
       83: 1290:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:		//reduce number of cards in hand
       83: 1292:		state->handCount[currentPlayer]--;
        -: 1293:	}
        -: 1294:
       83: 1295:	return 0;
        -: 1296:}
        -: 1297:
       40: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:	//Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:	//check if supply pile is empty (0) or card is not used in game (-1)
       40: 1303:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:	{
        4: 1305:		return -1;
        -: 1306:	}
        -: 1307:
        -: 1308:	//added card for [whoseTurn] current player:
        -: 1309:	// toFlag = 0 : add to discard
        -: 1310:	// toFlag = 1 : add to deck
        -: 1311:	// toFlag = 2 : add to hand
        -: 1312:
       36: 1313:	if (toFlag == 1)
        -: 1314:	{
       12: 1315:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       12: 1316:		state->deckCount[player]++;
        -: 1317:	}
       24: 1318:	else if (toFlag == 2)
        -: 1319:	{
       12: 1320:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
       12: 1321:		state->handCount[player]++;
        -: 1322:	}
        -: 1323:	else
        -: 1324:	{
       12: 1325:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1326:		state->discardCount[player]++;
        -: 1327:	}
        -: 1328:
        -: 1329:	//decrease number in supply pile
       36: 1330:	state->supplyCount[supplyPos]--;
        -: 1331:
       36: 1332:	return 0;
        -: 1333:}
        -: 1334:
      234: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:	int i;
        -: 1338:
        -: 1339:	//reset coin count
      234: 1340:	state->coins = 0;
        -: 1341:
        -: 1342:	//add coins for each Treasure card in player's hand
     1524: 1343:	for (i = 0; i < state->handCount[player]; i++)
        -: 1344:	{
     1290: 1345:		if (state->hand[player][i] == copper)
        -: 1346:		{
      864: 1347:			state->coins += 1;
        -: 1348:		}
      426: 1349:		else if (state->hand[player][i] == silver)
        -: 1350:		{
       24: 1351:			state->coins += 2;
        -: 1352:		}
      402: 1353:		else if (state->hand[player][i] == gold)
        -: 1354:		{
       24: 1355:			state->coins += 3;
        -: 1356:		}	
        -: 1357:	}	
        -: 1358:
        -: 1359:	//add bonus
      234: 1360:	state->coins += bonus;
        -: 1361:
      234: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
