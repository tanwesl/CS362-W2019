        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:
        -:   38://new smithy card function, is used in cardEffect
    #####:   39:int run_smithy(int currentPlayer, struct gameState *state, int handPos){
        -:   40:	int i;
        -:   41:	//***included error here. This will now cause the game to draw one card instead
        -:   42:	//of three cards 
    #####:   43:	for (i = 0; i < 1; i++)
        -:   44:	{
    #####:   45:		drawCard(currentPlayer, state);
        -:   46:	}
        -:   47:			
        -:   48:	//discard card from hand
    #####:   49:	discardCard(handPos, currentPlayer, state, 0);
    #####:   50:	return 0;
        -:   51:}
        -:   52:
        -:   53://new adventurer function, is used in cardEffect
        5:   54:int run_adventurer(int currentPlayer, int drawntreasure, struct gameState *state, 
        -:   55:						  int cardDrawn, int *temphand, int z) {
       33:   56:	while(drawntreasure<2){
        -:   57:		//if the deck is empty we need to shuffle discard and add to deck
       23:   58:		if (state->deckCount[currentPlayer] <1){
    #####:   59:	  		shuffle(currentPlayer, state);
        -:   60:		}
        -:   61:
       23:   62:		drawCard(currentPlayer, state);
        -:   63:
        -:   64:		//top card of hand is most recently drawn card.
       23:   65:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -:   66:
        -:   67:		//****inserted error here. Instead of incrementing the drawntreasure variable,
        -:   68:		//it now will always be 2. This will result in only one treasure card being drawn.
       23:   69:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        5:   70:			drawntreasure=2;
        -:   71:		else{
       18:   72:			temphand[z]=cardDrawn;
        -:   73:			//this should just remove the top card (the most recently drawn one).	
       18:   74:			state->handCount[currentPlayer]--; 
       18:   75:	  		z++;
        -:   76:		}
        -:   77:	}
        -:   78:
       28:   79:	while(z-1>=0){
        -:   80:		// discard all cards in play that have been drawn
       18:   81:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
       18:   82:		z=z-1;
        -:   83:	}
        5:   84:	return 0;
        -:   85:}
        -:   86:
        -:   87://new village function, is used in cardEffect
    #####:   88:int run_village(int currentPlayer, struct gameState *state, int handPos){
        -:   89:
        -:   90:	//****inserted error here. Intead of drawing just one card, three cards will
        -:   91:	//be drawn.
    #####:   92:	drawCard(currentPlayer, state);
    #####:   93:	drawCard(currentPlayer, state);
    #####:   94:	drawCard(currentPlayer, state);
        -:   95:			
        -:   96:	//+2 Actions
    #####:   97:	state->numActions = state->numActions + 2;
        -:   98:			
        -:   99:	//discard played card from hand
    #####:  100:	discardCard(handPos, currentPlayer, state, 0);
        -:  101:
    #####:  102:	return 0;
        -:  103:}
        -:  104:
        -:  105://new mine function, is used in cardEffect
        -:  106://Added error here. Flipped choice1 and choice2. Now, the card the player 
        -:  107://wants to trash will actually indicate the cardposition they will buy. 
        -:  108://The card they indicate to buy will now be the cardposition that will be trashed.
    #####:  109:int run_mine(int currentPlayer, struct gameState *state, int handPos, int choice2,
        -:  110:				  int choice1, int j){
        -:  111:
    #####:  112:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  113:
    #####:  114:	if (state->hand[currentPlayer][choice1] < copper || 
    #####:  115:		 state->hand[currentPlayer][choice1] > gold)
        -:  116:	{
    #####:  117:		return -1;
        -:  118:	}
        -:  119:		
    #####:  120:	if (choice2 > treasure_map || choice2 < curse)
        -:  121:	{
    #####:  122:	  return -1;
        -:  123:	}
        -:  124:
    #####:  125:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  126:	{
    #####:  127:	  return -1;
        -:  128:	}
        -:  129:
    #####:  130:	gainCard(choice2, state, 2, currentPlayer);
        -:  131:
        -:  132:	//discard card from hand
    #####:  133:	discardCard(handPos, currentPlayer, state, 0);
        -:  134:
        -:  135:	//discard trashed card
        -:  136:	int i;
    #####:  137:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  138:	{
    #####:  139:		if (state->hand[currentPlayer][i] == j)
        -:  140:		{
    #####:  141:			discardCard(i, currentPlayer, state, 0);			
    #####:  142:	      break;
        -:  143:	   }
        -:  144:	}
        -:  145:
    #####:  146:	return 0;
        -:  147:}
        -:  148:
    #####:  149:int run_tribute(int currentPlayer, int nextPlayer, int *tributeRevealedCards, 
        -:  150:					 struct gameState *state){
        -:  151:	int i;
        -:  152:
    #####:  153:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  154:		if (state->deckCount[nextPlayer] > 0){
    #####:  155:	  		tributeRevealedCards[0] = 
    #####:  156:								state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  157:	  		state->deckCount[nextPlayer]--;
        -:  158:		}
    #####:  159:		else if (state->discardCount[nextPlayer] > 0){
    #####:  160:			tributeRevealedCards[0] = 
    #####:  161:								state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  162:			state->discardCount[nextPlayer]--;
        -:  163:		}
        -:  164:		else{
        -:  165:			//No Card to Reveal
        -:  166:			if (DEBUG){
        -:  167:				printf("No cards to reveal\n");
        -:  168:	  		}
        -:  169:		}
        -:  170:	}
        -:  171:	    
        -:  172:   else{
    #####:  173:		if (state->deckCount[nextPlayer] == 0){
    #####:  174:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  175:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  176:	    		state->deckCount[nextPlayer]++;
    #####:  177:	    		state->discard[nextPlayer][i] = -1;
    #####:  178:	    		state->discardCount[nextPlayer]--;
        -:  179:	  		}
        -:  180:			    
    #####:  181:	  	shuffle(nextPlayer,state);//Shuffle the deck
        -:  182:		} 
        -:  183:		
    #####:  184:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  185:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  186:		state->deckCount[nextPlayer]--;
    #####:  187:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  188:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  189:		state->deckCount[nextPlayer]--;
        -:  190:	}    
        -:  191:	
        -:  192:	//If we have a duplicate card, just drop one
    #####:  193:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){ 
    #####:  194:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  195:		state->playedCardCount++;
    #####:  196:		tributeRevealedCards[1] = -1;
        -:  197:	}
        -:  198:	
    #####:  199:	for (i = 0; i <= 2; i ++){
        -:  200:		//Treasure cards
    #####:  201:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver 
    #####:  202:			|| tributeRevealedCards[i] == gold){
    #####:  203:	  		state->coins += 2;
        -:  204:		}
        -:  205:		//victory Card Found   
    #####:  206:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy 
    #####:  207:				|| tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){
    #####:  208:			drawCard(currentPlayer, state);
    #####:  209:	  		drawCard(currentPlayer, state);
        -:  210:		}
        -:  211:		//Action Card
        -:  212:		else{
    #####:  213:			state->numActions = state->numActions + 2;
        -:  214:		}
        -:  215:	}
    #####:  216:	return 0;	
        -:  217:}
        -:  218:
        5:  219:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  220:		   struct gameState *state) {
        -:  221:
        -:  222:  int i;
        -:  223:  int j;
        -:  224:  int it;			
        -:  225:  //set up random number generator
        5:  226:  SelectStream(1);
        5:  227:  PutSeed((long)randomSeed);
        -:  228:  
        -:  229:  //check number of players
        5:  230:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  231:    {
    #####:  232:      return -1;
        -:  233:    }
        -:  234:
        -:  235:  //set number of players
        5:  236:  state->numPlayers = numPlayers;
        -:  237:
        -:  238:  //check selected kingdom cards are different
       55:  239:  for (i = 0; i < 10; i++)
        -:  240:    {
      550:  241:      for (j = 0; j < 10; j++)
        -:  242:        {
      500:  243:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  244:	    {
    #####:  245:	      return -1;
        -:  246:	    }
        -:  247:        }
        -:  248:    }
        -:  249:
        -:  250:
        -:  251:  //initialize supply
        -:  252:  ///////////////////////////////
        -:  253:
        -:  254:  //set number of Curse cards
        5:  255:  if (numPlayers == 2)
        -:  256:    {
        5:  257:      state->supplyCount[curse] = 10;
        -:  258:    }
    #####:  259:  else if (numPlayers == 3)
        -:  260:    {
    #####:  261:      state->supplyCount[curse] = 20;
        -:  262:    }
        -:  263:  else
        -:  264:    {
    #####:  265:      state->supplyCount[curse] = 30;
        -:  266:    }
        -:  267:
        -:  268:  //set number of Victory cards
        5:  269:  if (numPlayers == 2)
        -:  270:    {
        5:  271:      state->supplyCount[estate] = 8;
        5:  272:      state->supplyCount[duchy] = 8;
        5:  273:      state->supplyCount[province] = 8;
        -:  274:    }
        -:  275:  else
        -:  276:    {
    #####:  277:      state->supplyCount[estate] = 12;
    #####:  278:      state->supplyCount[duchy] = 12;
    #####:  279:      state->supplyCount[province] = 12;
        -:  280:    }
        -:  281:
        -:  282:  //set number of Treasure cards
        5:  283:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  284:  state->supplyCount[silver] = 40;
        5:  285:  state->supplyCount[gold] = 30;
        -:  286:
        -:  287:  //set number of Kingdom cards
      105:  288:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  289:    {
      825:  290:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  291:	{
      775:  292:	  if (kingdomCards[j] == i)
        -:  293:	    {
        -:  294:	      //check if card is a 'Victory' Kingdom card
       50:  295:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  296:		{
       20:  297:		  if (numPlayers == 2){ 
       10:  298:		    state->supplyCount[i] = 8; 
        -:  299:		  }
    #####:  300:		  else{ state->supplyCount[i] = 12; }
        -:  301:		}
        -:  302:	      else
        -:  303:		{
       40:  304:		  state->supplyCount[i] = 10;
        -:  305:		}
       50:  306:	      break;
        -:  307:	    }
        -:  308:	  else    //card is not in the set choosen for the game
        -:  309:	    {
      725:  310:	      state->supplyCount[i] = -1;
        -:  311:	    }
        -:  312:	}
        -:  313:
        -:  314:    }
        -:  315:
        -:  316:  ////////////////////////
        -:  317:  //supply intilization complete
        -:  318:
        -:  319:  //set player decks
       15:  320:  for (i = 0; i < numPlayers; i++)
        -:  321:    {
       10:  322:      state->deckCount[i] = 0;
       40:  323:      for (j = 0; j < 3; j++)
        -:  324:	{
       30:  325:	  state->deck[i][j] = estate;
       30:  326:	  state->deckCount[i]++;
        -:  327:	}
       80:  328:      for (j = 3; j < 10; j++)
        -:  329:	{
       70:  330:	  state->deck[i][j] = copper;
       70:  331:	  state->deckCount[i]++;		
        -:  332:	}
        -:  333:    }
        -:  334:
        -:  335:  //shuffle player decks
       15:  336:  for (i = 0; i < numPlayers; i++)
        -:  337:    {
       10:  338:      if ( shuffle(i, state) < 0 )
        -:  339:	{
    #####:  340:	  return -1;
        -:  341:	}
        -:  342:    }
        -:  343:
        -:  344:  //draw player hands
       15:  345:  for (i = 0; i < numPlayers; i++)
        -:  346:    {  
        -:  347:      //initialize hand size to zero
       10:  348:      state->handCount[i] = 0;
       10:  349:      state->discardCount[i] = 0;
        -:  350:      //draw 5 cards
        -:  351:      // for (j = 0; j < 5; j++)
        -:  352:      //	{
        -:  353:      //	  drawCard(i, state);
        -:  354:      //	}
        -:  355:    }
        -:  356:  
        -:  357:  //set embargo tokens to 0 for all supply piles
      140:  358:  for (i = 0; i <= treasure_map; i++)
        -:  359:    {
      135:  360:      state->embargoTokens[i] = 0;
        -:  361:    }
        -:  362:
        -:  363:  //initialize first player's turn
        5:  364:  state->outpostPlayed = 0;
        5:  365:  state->phase = 0;
        5:  366:  state->numActions = 1;
        5:  367:  state->numBuys = 1;
        5:  368:  state->playedCardCount = 0;
        5:  369:  state->whoseTurn = 0;
        5:  370:  state->handCount[state->whoseTurn] = 0;
        -:  371:  //int it; move to top
        -:  372:
        -:  373:  //Moved draw cards to here, only drawing at the start of a turn
       30:  374:  for (it = 0; it < 5; it++){
       25:  375:    drawCard(state->whoseTurn, state);
        -:  376:  }
        -:  377:
        5:  378:  updateCoins(state->whoseTurn, state, 0);
        -:  379:
        5:  380:  return 0;
        -:  381:}
        -:  382:
       10:  383:int shuffle(int player, struct gameState *state) {
        -:  384: 
        -:  385:
        -:  386:  int newDeck[MAX_DECK];
       10:  387:  int newDeckPos = 0;
        -:  388:  int card;
        -:  389:  int i;
        -:  390:
       10:  391:  if (state->deckCount[player] < 1)
    #####:  392:    return -1;
       10:  393:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  394:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  395:
      120:  396:  while (state->deckCount[player] > 0) {
      100:  397:    card = floor(Random() * state->deckCount[player]);
      100:  398:    newDeck[newDeckPos] = state->deck[player][card];
      100:  399:    newDeckPos++;
      350:  400:    for (i = card; i < state->deckCount[player]-1; i++) {
      250:  401:      state->deck[player][i] = state->deck[player][i+1];
        -:  402:    }
      100:  403:    state->deckCount[player]--;
        -:  404:  }
      110:  405:  for (i = 0; i < newDeckPos; i++) {
      100:  406:    state->deck[player][i] = newDeck[i];
      100:  407:    state->deckCount[player]++;
        -:  408:  }
        -:  409:
       10:  410:  return 0;
        -:  411:}
        -:  412:
    #####:  413:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  414:{	
        -:  415:  int card;
    #####:  416:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  417:
        -:  418:  //check if it is the right phase
    #####:  419:  if (state->phase != 0)
        -:  420:    {
    #####:  421:      return -1;
        -:  422:    }
        -:  423:	
        -:  424:  //check if player has enough actions
    #####:  425:  if ( state->numActions < 1 )
        -:  426:    {
    #####:  427:      return -1;
        -:  428:    }
        -:  429:	
        -:  430:  //get card played
    #####:  431:  card = handCard(handPos, state);
        -:  432:	
        -:  433:  //check if selected card is an action
    #####:  434:  if ( card < adventurer || card > treasure_map )
        -:  435:    {
    #####:  436:      return -1;
        -:  437:    }
        -:  438:	
        -:  439:  //play card
    #####:  440:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  441:    {
    #####:  442:      return -1;
        -:  443:    }
        -:  444:	
        -:  445:  //reduce number of actions
    #####:  446:  state->numActions--;
        -:  447:
        -:  448:  //update coins (Treasure cards may be added with card draws)
    #####:  449:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  450:	
    #####:  451:  return 0;
        -:  452:}
        -:  453:
    #####:  454:int buyCard(int supplyPos, struct gameState *state) {
        -:  455:  int who;
        -:  456:  if (DEBUG){
        -:  457:    printf("Entering buyCard...\n");
        -:  458:  }
        -:  459:
        -:  460:  // I don't know what to do about the phase thing.
        -:  461:
    #####:  462:  who = state->whoseTurn;
        -:  463:
    #####:  464:  if (state->numBuys < 1){
        -:  465:    if (DEBUG)
        -:  466:      printf("You do not have any buys left\n");
    #####:  467:    return -1;
    #####:  468:  } else if (supplyCount(supplyPos, state) <1){
        -:  469:    if (DEBUG)
        -:  470:      printf("There are not any of that type of card left\n");
    #####:  471:    return -1;
    #####:  472:  } else if (state->coins < getCost(supplyPos)){
        -:  473:    if (DEBUG) 
        -:  474:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  475:    return -1;
        -:  476:  } else {
    #####:  477:    state->phase=1;
        -:  478:    //state->supplyCount[supplyPos]--;
    #####:  479:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  480:  
    #####:  481:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  482:    state->numBuys--;
        -:  483:    if (DEBUG)
        -:  484:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  485:  }
        -:  486:
        -:  487:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  488:  //state->discardCount[who]++;
        -:  489:    
    #####:  490:  return 0;
        -:  491:}
        -:  492:
    #####:  493:int numHandCards(struct gameState *state) {
    #####:  494:  return state->handCount[ whoseTurn(state) ];
        -:  495:}
        -:  496:
    #####:  497:int handCard(int handPos, struct gameState *state) {
    #####:  498:  int currentPlayer = whoseTurn(state);
    #####:  499:  return state->hand[currentPlayer][handPos];
        -:  500:}
        -:  501:
    #####:  502:int supplyCount(int card, struct gameState *state) {
    #####:  503:  return state->supplyCount[card];
        -:  504:}
        -:  505:
    #####:  506:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  507:  int i;
    #####:  508:  int count = 0;
        -:  509:
    #####:  510:  for (i = 0; i < state->deckCount[player]; i++)
        -:  511:    {
    #####:  512:      if (state->deck[player][i] == card) count++;
        -:  513:    }
        -:  514:
    #####:  515:  for (i = 0; i < state->handCount[player]; i++)
        -:  516:    {
    #####:  517:      if (state->hand[player][i] == card) count++;
        -:  518:    }
        -:  519:
    #####:  520:  for (i = 0; i < state->discardCount[player]; i++)
        -:  521:    {
    #####:  522:      if (state->discard[player][i] == card) count++;
        -:  523:    }
        -:  524:
    #####:  525:  return count;
        -:  526:}
        -:  527:
        5:  528:int whoseTurn(struct gameState *state) {
        5:  529:  return state->whoseTurn;
        -:  530:}
        -:  531:
    #####:  532:int endTurn(struct gameState *state) {
        -:  533:  int k;
        -:  534:  int i;
    #####:  535:  int currentPlayer = whoseTurn(state);
        -:  536:  
        -:  537:  //Discard hand
    #####:  538:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  539:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  540:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  541:  }
    #####:  542:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  543:    
        -:  544:  //Code for determining the player
    #####:  545:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  546:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  547:  }
        -:  548:  else{
    #####:  549:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  550:  }
        -:  551:
    #####:  552:  state->outpostPlayed = 0;
    #####:  553:  state->phase = 0;
    #####:  554:  state->numActions = 1;
    #####:  555:  state->coins = 0;
    #####:  556:  state->numBuys = 1;
    #####:  557:  state->playedCardCount = 0;
    #####:  558:  state->handCount[state->whoseTurn] = 0;
        -:  559:
        -:  560:  //int k; move to top
        -:  561:  //Next player draws hand
    #####:  562:  for (k = 0; k < 5; k++){
    #####:  563:    drawCard(state->whoseTurn, state);//Draw a card
        -:  564:  }
        -:  565:
        -:  566:  //Update money
    #####:  567:  updateCoins(state->whoseTurn, state , 0);
        -:  568:
    #####:  569:  return 0;
        -:  570:}
        -:  571:
    #####:  572:int isGameOver(struct gameState *state) {
        -:  573:  int i;
        -:  574:  int j;
        -:  575:	
        -:  576:  //if stack of Province cards is empty, the game ends
    #####:  577:  if (state->supplyCount[province] == 0)
        -:  578:    {
    #####:  579:      return 1;
        -:  580:    }
        -:  581:
        -:  582:  //if three supply pile are at 0, the game ends
    #####:  583:  j = 0;
    #####:  584:  for (i = 0; i < 25; i++)
        -:  585:    {
    #####:  586:      if (state->supplyCount[i] == 0)
        -:  587:	{
    #####:  588:	  j++;
        -:  589:	}
        -:  590:    }
    #####:  591:  if ( j >= 3)
        -:  592:    {
    #####:  593:      return 1;
        -:  594:    }
        -:  595:
    #####:  596:  return 0;
        -:  597:}
        -:  598:
    #####:  599:int scoreFor (int player, struct gameState *state) {
        -:  600:
        -:  601:  int i;
    #####:  602:  int score = 0;
        -:  603:  //score from hand
    #####:  604:  for (i = 0; i < state->handCount[player]; i++)
        -:  605:    {
    #####:  606:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  607:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  608:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  609:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  610:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  611:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  612:    }
        -:  613:
        -:  614:  //score from discard
    #####:  615:  for (i = 0; i < state->discardCount[player]; i++)
        -:  616:    {
    #####:  617:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  618:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  619:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  620:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  621:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  622:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  623:    }
        -:  624:
        -:  625:  //score from deck
    #####:  626:  for (i = 0; i < state->discardCount[player]; i++)
        -:  627:    {
    #####:  628:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  629:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  630:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  631:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  632:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  633:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  634:    }
        -:  635:
    #####:  636:  return score;
        -:  637:}
        -:  638:
    #####:  639:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  640:  int i;	
        -:  641:  int j;
        -:  642:  int highScore;
        -:  643:  int currentPlayer;
        -:  644:
        -:  645:  //get score for each player
    #####:  646:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  647:    {
        -:  648:      //set unused player scores to -9999
    #####:  649:      if (i >= state->numPlayers)
        -:  650:	{
    #####:  651:	  players[i] = -9999;
        -:  652:	}
        -:  653:      else
        -:  654:	{
    #####:  655:	  players[i] = scoreFor (i, state);
        -:  656:	}
        -:  657:    }
        -:  658:
        -:  659:  //find highest score
    #####:  660:  j = 0;
    #####:  661:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  662:    {
    #####:  663:      if (players[i] > players[j])
        -:  664:	{
    #####:  665:	  j = i;
        -:  666:	}
        -:  667:    }
    #####:  668:  highScore = players[j];
        -:  669:
        -:  670:  //add 1 to players who had less turns
    #####:  671:  currentPlayer = whoseTurn(state);
    #####:  672:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  673:    {
    #####:  674:      if ( players[i] == highScore && i > currentPlayer )
        -:  675:	{
    #####:  676:	  players[i]++;
        -:  677:	}
        -:  678:    }
        -:  679:
        -:  680:  //find new highest score
    #####:  681:  j = 0;
    #####:  682:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  683:    {
    #####:  684:      if ( players[i] > players[j] )
        -:  685:	{
    #####:  686:	  j = i;
        -:  687:	}
        -:  688:    }
    #####:  689:  highScore = players[j];
        -:  690:
        -:  691:  //set winners in array to 1 and rest to 0
    #####:  692:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  693:    {
    #####:  694:      if ( players[i] == highScore )
        -:  695:	{
    #####:  696:	  players[i] = 1;
        -:  697:	}
        -:  698:      else
        -:  699:	{
    #####:  700:	  players[i] = 0;
        -:  701:	}
        -:  702:    }
        -:  703:
    #####:  704:  return 0;
        -:  705:}
        -:  706:
       48:  707:int drawCard(int player, struct gameState *state)
        -:  708:{	int count;
        -:  709:  int deckCounter;
       48:  710:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  711:    
        -:  712:    //Step 1 Shuffle the discard pile back into a deck
        -:  713:    int i;
        -:  714:    //Move discard to deck
    #####:  715:    for (i = 0; i < state->discardCount[player];i++){
    #####:  716:      state->deck[player][i] = state->discard[player][i];
    #####:  717:      state->discard[player][i] = -1;
        -:  718:    }
        -:  719:
    #####:  720:    state->deckCount[player] = state->discardCount[player];
    #####:  721:    state->discardCount[player] = 0;//Reset discard
        -:  722:
        -:  723:    //Shufffle the deck
    #####:  724:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  725:   
        -:  726:    if (DEBUG){//Debug statements
        -:  727:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  728:    }
        -:  729:    
    #####:  730:    state->discardCount[player] = 0;
        -:  731:
        -:  732:    //Step 2 Draw Card
    #####:  733:    count = state->handCount[player];//Get current player's hand count
        -:  734:    
        -:  735:    if (DEBUG){//Debug statements
        -:  736:      printf("Current hand count: %d\n", count);
        -:  737:    }
        -:  738:    
    #####:  739:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  740:
    #####:  741:    if (deckCounter == 0)
    #####:  742:      return -1;
        -:  743:
    #####:  744:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  745:    state->deckCount[player]--;
    #####:  746:    state->handCount[player]++;//Increment hand count
        -:  747:  }
        -:  748:
        -:  749:  else{
       48:  750:    int count = state->handCount[player];//Get current hand count for player
        -:  751:    int deckCounter;
        -:  752:    if (DEBUG){//Debug statements
        -:  753:      printf("Current hand count: %d\n", count);
        -:  754:    }
        -:  755:
       48:  756:    deckCounter = state->deckCount[player];//Create holder for the deck count
       48:  757:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       48:  758:    state->deckCount[player]--;
       48:  759:    state->handCount[player]++;//Increment hand count
        -:  760:  }
        -:  761:
       48:  762:  return 0;
        -:  763:}
        -:  764:
    #####:  765:int getCost(int cardNumber)
        -:  766:{
    #####:  767:  switch( cardNumber ) 
        -:  768:    {
        -:  769:    case curse:
    #####:  770:      return 0;
        -:  771:    case estate:
    #####:  772:      return 2;
        -:  773:    case duchy:
    #####:  774:      return 5;
        -:  775:    case province:
    #####:  776:      return 8;
        -:  777:    case copper:
    #####:  778:      return 0;
        -:  779:    case silver:
    #####:  780:      return 3;
        -:  781:    case gold:
    #####:  782:      return 6;
        -:  783:    case adventurer:
    #####:  784:      return 6;
        -:  785:    case council_room:
    #####:  786:      return 5;
        -:  787:    case feast:
    #####:  788:      return 4;
        -:  789:    case gardens:
    #####:  790:      return 4;
        -:  791:    case mine:
    #####:  792:      return 5;
        -:  793:    case remodel:
    #####:  794:      return 4;
        -:  795:    case smithy:
    #####:  796:      return 4;
        -:  797:    case village:
    #####:  798:      return 3;
        -:  799:    case baron:
    #####:  800:      return 4;
        -:  801:    case great_hall:
    #####:  802:      return 3;
        -:  803:    case minion:
    #####:  804:      return 5;
        -:  805:    case steward:
    #####:  806:      return 3;
        -:  807:    case tribute:
    #####:  808:      return 5;
        -:  809:    case ambassador:
    #####:  810:      return 3;
        -:  811:    case cutpurse:
    #####:  812:      return 4;
        -:  813:    case embargo: 
    #####:  814:      return 2;
        -:  815:    case outpost:
    #####:  816:      return 5;
        -:  817:    case salvager:
    #####:  818:      return 4;
        -:  819:    case sea_hag:
    #####:  820:      return 4;
        -:  821:    case treasure_map:
    #####:  822:      return 4;
        -:  823:    }
        -:  824:	
    #####:  825:  return -1;
        -:  826:}
        -:  827:
        5:  828:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  829:{
        -:  830:  int i;
        -:  831:  int j;
        -:  832:  int k;
        -:  833:  int x;
        -:  834:  int index;
        5:  835:  int currentPlayer = whoseTurn(state);
        5:  836:  int nextPlayer = currentPlayer + 1;
        -:  837:
        5:  838:  int tributeRevealedCards[2] = {-1, -1};
        -:  839:  int temphand[MAX_HAND];// moved above the if statement
        5:  840:  int drawntreasure=0;
        -:  841:  int cardDrawn;
        5:  842:  int z = 0;// this is the counter for the temp hand
        5:  843:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  844:    nextPlayer = 0;
        -:  845:  }
        -:  846:  
        -:  847:	
        -:  848:  //uses switch to select card and perform actions
        5:  849:  switch( card ) 
        -:  850:    {
        -:  851:    case adventurer:
        5:  852:		 run_adventurer(currentPlayer, drawntreasure, state, cardDrawn, temphand, z);
        5:  853:      return 0;
        -:  854:			
        -:  855:    case council_room:
        -:  856:      //+4 Cards
    #####:  857:      for (i = 0; i < 4; i++)
        -:  858:	{
    #####:  859:	  drawCard(currentPlayer, state);
        -:  860:	}
        -:  861:			
        -:  862:      //+1 Buy
    #####:  863:      state->numBuys++;
        -:  864:			
        -:  865:      //Each other player draws a card
    #####:  866:      for (i = 0; i < state->numPlayers; i++)
        -:  867:	{
    #####:  868:	  if ( i != currentPlayer )
        -:  869:	    {
    #####:  870:	      drawCard(i, state);
        -:  871:	    }
        -:  872:	}
        -:  873:			
        -:  874:      //put played card in played card pile
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
        -:  876:			
    #####:  877:      return 0;
        -:  878:			
        -:  879:    case feast:
        -:  880:      //gain card with cost up to 5
        -:  881:      //Backup hand
    #####:  882:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  883:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  884:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  885:      }
        -:  886:      //Backup hand
        -:  887:
        -:  888:      //Update Coins for Buy
    #####:  889:      updateCoins(currentPlayer, state, 5);
    #####:  890:      x = 1;//Condition to loop on
    #####:  891:      while( x == 1) {//Buy one card
    #####:  892:	if (supplyCount(choice1, state) <= 0){
        -:  893:	  if (DEBUG)
        -:  894:	    printf("None of that card left, sorry!\n");
        -:  895:
        -:  896:	  if (DEBUG){
        -:  897:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  898:	  }
        -:  899:	}
    #####:  900:	else if (state->coins < getCost(choice1)){
    #####:  901:	  printf("That card is too expensive!\n");
        -:  902:
        -:  903:	  if (DEBUG){
        -:  904:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  905:	  }
        -:  906:	}
        -:  907:	else{
        -:  908:
        -:  909:	  if (DEBUG){
        -:  910:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  911:	  }
        -:  912:
    #####:  913:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  914:	  x = 0;//No more buying cards
        -:  915:
        -:  916:	  if (DEBUG){
        -:  917:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  918:	  }
        -:  919:
        -:  920:	}
        -:  921:      }     
        -:  922:
        -:  923:      //Reset Hand
    #####:  924:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  925:	state->hand[currentPlayer][i] = temphand[i];
    #####:  926:	temphand[i] = -1;
        -:  927:      }
        -:  928:      //Reset Hand
        -:  929:      			
    #####:  930:      return 0;
        -:  931:			
        -:  932:    case gardens:
    #####:  933:      return -1;
        -:  934:			
        -:  935:    case mine:
    #####:  936:		run_mine(currentPlayer, state, handPos, choice1, choice2, j);
    #####:  937:      return 0;
        -:  938:			
        -:  939:    case remodel:
    #####:  940:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  941:
    #####:  942:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  943:	{
    #####:  944:	  return -1;
        -:  945:	}
        -:  946:
    #####:  947:      gainCard(choice2, state, 0, currentPlayer);
        -:  948:
        -:  949:      //discard card from hand
    #####:  950:      discardCard(handPos, currentPlayer, state, 0);
        -:  951:
        -:  952:      //discard trashed card
    #####:  953:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  954:	{
    #####:  955:	  if (state->hand[currentPlayer][i] == j)
        -:  956:	    {
    #####:  957:	      discardCard(i, currentPlayer, state, 0);			
    #####:  958:	      break;
        -:  959:	    }
        -:  960:	}
        -:  961:
        -:  962:
    #####:  963:      return 0;
        -:  964:	
        -:  965:	//****put smithy operation into a function at top of file****//	
        -:  966:    case smithy:
        -:  967:      //+3 Cards
    #####:  968:		run_smithy(currentPlayer, state, handPos);
    #####:  969:      return 0;
        -:  970:		
        -:  971:    case village:
        -:  972:      //+1 Card
    #####:  973:      run_village(currentPlayer, state, handPos);
    #####:  974:		return 0;
        -:  975:		
        -:  976:    case baron:
    #####:  977:      state->numBuys++;//Increase buys by 1!
    #####:  978:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  979:	int p = 0;//Iterator for hand!
    #####:  980:	int card_not_discarded = 1;//Flag for discard set!
    #####:  981:	while(card_not_discarded){
    #####:  982:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  983:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  984:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  985:	    state->discardCount[currentPlayer]++;
    #####:  986:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  987:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  988:	    }
    #####:  989:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  990:	    state->handCount[currentPlayer]--;
    #####:  991:	    card_not_discarded = 0;//Exit the loop
        -:  992:	  }
    #####:  993:	  else if (p > state->handCount[currentPlayer]){
        -:  994:	    if(DEBUG) {
        -:  995:	      printf("No estate cards in your hand, invalid choice\n");
        -:  996:	      printf("Must gain an estate if there are any\n");
        -:  997:	    }
    #####:  998:	    if (supplyCount(estate, state) > 0){
    #####:  999:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1000:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1001:	      if (supplyCount(estate, state) == 0){
    #####: 1002:		isGameOver(state);
        -: 1003:	      }
        -: 1004:	    }
    #####: 1005:	    card_not_discarded = 0;//Exit the loop
        -: 1006:	  }
        -: 1007:			    
        -: 1008:	  else{
    #####: 1009:	    p++;//Next card
        -: 1010:	  }
        -: 1011:	}
        -: 1012:      }
        -: 1013:			    
        -: 1014:      else{
    #####: 1015:	if (supplyCount(estate, state) > 0){
    #####: 1016:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1017:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1018:	  if (supplyCount(estate, state) == 0){
    #####: 1019:	    isGameOver(state);
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case great_hall:
        -: 1028:      //+1 Card
    #####: 1029:      drawCard(currentPlayer, state);
        -: 1030:			
        -: 1031:      //+1 Actions
    #####: 1032:      state->numActions++;
        -: 1033:			
        -: 1034:      //discard card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case minion:
        -: 1039:      //+1 action
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
        -: 1044:			
    #####: 1045:      if (choice1)		//+2 coins
        -: 1046:	{
    #####: 1047:	  state->coins = state->coins + 2;
        -: 1048:	}
        -: 1049:			
    #####: 1050:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1051:	{
        -: 1052:	  //discard hand
    #####: 1053:	  while(numHandCards(state) > 0)
        -: 1054:	    {
    #####: 1055:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1056:	    }
        -: 1057:				
        -: 1058:	  //draw 4
    #####: 1059:	  for (i = 0; i < 4; i++)
        -: 1060:	    {
    #####: 1061:	      drawCard(currentPlayer, state);
        -: 1062:	    }
        -: 1063:				
        -: 1064:	  //other players discard hand and redraw if hand size > 4
    #####: 1065:	  for (i = 0; i < state->numPlayers; i++)
        -: 1066:	    {
    #####: 1067:	      if (i != currentPlayer)
        -: 1068:		{
    #####: 1069:		  if ( state->handCount[i] > 4 )
        -: 1070:		    {
        -: 1071:		      //discard hand
    #####: 1072:		      while( state->handCount[i] > 0 )
        -: 1073:			{
    #####: 1074:			  discardCard(handPos, i, state, 0);
        -: 1075:			}
        -: 1076:							
        -: 1077:		      //draw 4
    #####: 1078:		      for (j = 0; j < 4; j++)
        -: 1079:			{
    #####: 1080:			  drawCard(i, state);
        -: 1081:			}
        -: 1082:		    }
        -: 1083:		}
        -: 1084:	    }
        -: 1085:				
        -: 1086:	}
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case steward:
    #####: 1090:      if (choice1 == 1)
        -: 1091:	{
        -: 1092:	  //+2 cards
    #####: 1093:	  drawCard(currentPlayer, state);
    #####: 1094:	  drawCard(currentPlayer, state);
        -: 1095:	}
    #####: 1096:      else if (choice1 == 2)
        -: 1097:	{
        -: 1098:	  //+2 coins
    #####: 1099:	  state->coins = state->coins + 2;
        -: 1100:	}
        -: 1101:      else
        -: 1102:	{
        -: 1103:	  //trash 2 cards in hand
    #####: 1104:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1105:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1106:	}
        -: 1107:			
        -: 1108:      //discard card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case tribute:
    #####: 1113:		run_tribute(currentPlayer, nextPlayer, tributeRevealedCards, state);
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case ambassador:
    #####: 1117:      j = 0;		//used to check if player has enough cards to discard
        -: 1118:
    #####: 1119:      if (choice2 > 2 || choice2 < 0)
        -: 1120:	{
    #####: 1121:	  return -1;				
        -: 1122:	}
        -: 1123:
    #####: 1124:      if (choice1 == handPos)
        -: 1125:	{
    #####: 1126:	  return -1;
        -: 1127:	}
        -: 1128:
    #####: 1129:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1130:	{
    #####: 1131:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1132:	    {
    #####: 1133:	      j++;
        -: 1134:	    }
        -: 1135:	}
    #####: 1136:      if (j < choice2)
        -: 1137:	{
    #####: 1138:	  return -1;				
        -: 1139:	}
        -: 1140:
        -: 1141:      if (DEBUG) 
        -: 1142:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1143:
        -: 1144:      //increase supply count for choosen card by amount being discarded
    #####: 1145:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1146:			
        -: 1147:      //each other player gains a copy of revealed card
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1153:	    }
        -: 1154:	}
        -: 1155:
        -: 1156:      //discard played card from hand
    #####: 1157:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1158:
        -: 1159:      //trash copies of cards returned to supply
    #####: 1160:      for (j = 0; j < choice2; j++)
        -: 1161:	{
    #####: 1162:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1163:	    {
    #####: 1164:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1165:		{
    #####: 1166:		  discardCard(i, currentPlayer, state, 1);
    #####: 1167:		  break;
        -: 1168:		}
        -: 1169:	    }
        -: 1170:	}			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:		
        -: 1174:    case cutpurse:
        -: 1175:
    #####: 1176:      updateCoins(currentPlayer, state, 2);
    #####: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
    #####: 1179:	  if (i != currentPlayer)
        -: 1180:	    {
    #####: 1181:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1182:		{
    #####: 1183:		  if (state->hand[i][j] == copper)
        -: 1184:		    {
    #####: 1185:		      discardCard(j, i, state, 0);
    #####: 1186:		      break;
        -: 1187:		    }
    #####: 1188:		  if (j == state->handCount[i])
        -: 1189:		    {
    #####: 1190:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1191:			{
        -: 1192:			  if (DEBUG)
        -: 1193:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1194:			}	
    #####: 1195:		      break;
        -: 1196:		    }		
        -: 1197:		}
        -: 1198:					
        -: 1199:	    }
        -: 1200:				
        -: 1201:	}				
        -: 1202:
        -: 1203:      //discard played card from hand
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1205:
    #####: 1206:      return 0;
        -: 1207:
        -: 1208:		
        -: 1209:    case embargo: 
        -: 1210:      //+2 Coins
    #####: 1211:      state->coins = state->coins + 2;
        -: 1212:			
        -: 1213:      //see if selected pile is in play
    #####: 1214:      if ( state->supplyCount[choice1] == -1 )
        -: 1215:	{
    #####: 1216:	  return -1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //add embargo token to selected supply pile
    #####: 1220:      state->embargoTokens[choice1]++;
        -: 1221:			
        -: 1222:      //trash card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case outpost:
        -: 1227:      //set outpost flag
    #####: 1228:      state->outpostPlayed++;
        -: 1229:			
        -: 1230:      //discard card
    #####: 1231:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case salvager:
        -: 1235:      //+1 buy
    #####: 1236:      state->numBuys++;
        -: 1237:			
    #####: 1238:      if (choice1)
        -: 1239:	{
        -: 1240:	  //gain coins equal to trashed card
    #####: 1241:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1242:	  //trash card
    #####: 1243:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1244:	}
        -: 1245:			
        -: 1246:      //discard card
    #####: 1247:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:      return 0;
        -: 1249:		
        -: 1250:    case sea_hag:
    #####: 1251:      for (i = 0; i < state->numPlayers; i++){
    #####: 1252:	if (i != currentPlayer){
    #####: 1253:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1254:	  state->discardCount[i]++;
    #####: 1255:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1256:	}
        -: 1257:      }
    #####: 1258:      return 0;
        -: 1259:		
        -: 1260:    case treasure_map:
        -: 1261:      //search hand for another treasure_map
    #####: 1262:      index = -1;
    #####: 1263:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1264:	{
    #####: 1265:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1266:	    {
    #####: 1267:	      index = i;
    #####: 1268:	      break;
        -: 1269:	    }
        -: 1270:	}
    #####: 1271:      if (index > -1)
        -: 1272:	{
        -: 1273:	  //trash both treasure cards
    #####: 1274:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1275:	  discardCard(index, currentPlayer, state, 1);
        -: 1276:
        -: 1277:	  //gain 4 Gold cards
    #####: 1278:	  for (i = 0; i < 4; i++)
        -: 1279:	    {
    #####: 1280:	      gainCard(gold, state, 1, currentPlayer);
        -: 1281:	    }
        -: 1282:				
        -: 1283:	  //return success
    #####: 1284:	  return 1;
        -: 1285:	}
        -: 1286:			
        -: 1287:      //no second treasure_map found in hand
    #####: 1288:      return -1;
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return -1;
        -: 1292:}
        -: 1293:
    #####: 1294:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1295:{
        -: 1296:	
        -: 1297:  //if card is not trashed, added to Played pile 
    #####: 1298:  if (trashFlag < 1)
        -: 1299:    {
        -: 1300:      //add card to played pile
    #####: 1301:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1302:      state->playedCardCount++;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //set played card to -1
    #####: 1306:  state->hand[currentPlayer][handPos] = -1;
        -: 1307:	
        -: 1308:  //remove card from player's hand
    #####: 1309:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1310:    {
        -: 1311:      //reduce number of cards in hand
    #####: 1312:      state->handCount[currentPlayer]--;
        -: 1313:    }
    #####: 1314:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1315:    {
        -: 1316:      //reduce number of cards in hand
    #####: 1317:      state->handCount[currentPlayer]--;
        -: 1318:    }
        -: 1319:  else 	
        -: 1320:    {
        -: 1321:      //replace discarded card with last card in hand
    #####: 1322:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1323:      //set last card to -1
    #####: 1324:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1325:      //reduce number of cards in hand
    #####: 1326:      state->handCount[currentPlayer]--;
        -: 1327:    }
        -: 1328:	
    #####: 1329:  return 0;
        -: 1330:}
        -: 1331:
    #####: 1332:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1333:{
        -: 1334:  //Note: supplyPos is enum of choosen card
        -: 1335:	
        -: 1336:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1337:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1338:    {
    #####: 1339:      return -1;
        -: 1340:    }
        -: 1341:	
        -: 1342:  //added card for [whoseTurn] current player:
        -: 1343:  // toFlag = 0 : add to discard
        -: 1344:  // toFlag = 1 : add to deck
        -: 1345:  // toFlag = 2 : add to hand
        -: 1346:
    #####: 1347:  if (toFlag == 1)
        -: 1348:    {
    #####: 1349:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1350:      state->deckCount[player]++;
        -: 1351:    }
    #####: 1352:  else if (toFlag == 2)
        -: 1353:    {
    #####: 1354:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1355:      state->handCount[player]++;
        -: 1356:    }
        -: 1357:  else
        -: 1358:    {
    #####: 1359:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1360:      state->discardCount[player]++;
        -: 1361:    }
        -: 1362:	
        -: 1363:  //decrease number in supply pile
    #####: 1364:  state->supplyCount[supplyPos]--;
        -: 1365:	 
    #####: 1366:  return 0;
        -: 1367:}
        -: 1368:
        5: 1369:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1370:{
        -: 1371:  int i;
        -: 1372:	
        -: 1373:  //reset coin count
        5: 1374:  state->coins = 0;
        -: 1375:
        -: 1376:  //add coins for each Treasure card in player's hand
       30: 1377:  for (i = 0; i < state->handCount[player]; i++)
        -: 1378:    {
       25: 1379:      if (state->hand[player][i] == copper)
        -: 1380:	{
       20: 1381:	  state->coins += 1;
        -: 1382:	}
        5: 1383:      else if (state->hand[player][i] == silver)
        -: 1384:	{
    #####: 1385:	  state->coins += 2;
        -: 1386:	}
        5: 1387:      else if (state->hand[player][i] == gold)
        -: 1388:	{
    #####: 1389:	  state->coins += 3;
        -: 1390:	}	
        -: 1391:    }	
        -: 1392:
        -: 1393:  //add bonus
        5: 1394:  state->coins += bonus;
        -: 1395:
        5: 1396:  return 0;
        -: 1397:}
        -: 1398:
        -: 1399:
        -: 1400://end of dominion.c
